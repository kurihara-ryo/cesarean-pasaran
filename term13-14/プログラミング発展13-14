{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/kurihara-ryo/cesarean-pasaran/blob/main/%E3%80%90%E8%A7%A3%E7%AD%94%E4%BE%8B%E3%80%91%E7%99%BA%E5%B1%95%E8%AA%B2%E9%A1%8C_%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E2%85%A2_1314.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 各課題について、コメントを参考にしてプログラムを書いてください。\n",
        "# 実行ボタンを押して、プログラムが正しく実行されることを確認してください。\n",
        "# 提出の際は、コメントを削除せずに残してください。\n",
        "# 全ての課題を解けなかった場合でも、〆切までに提出すれば途中点が付与されます。"
      ],
      "metadata": {
        "id": "iXcVPPdWXAzt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "課題1\n",
        "\n",
        "心不全患者のデータheart_failure_clinical_records.csvを用いて、死亡した患者のグループ（死亡群）と生存した患者のグループ（生存群）の駆出率に差があるかを統計検定で調べたいです。死亡群の駆出率が生存群より低いかについて、t検定による片側検定を行いp値を表示してください。p値にもとづき、死亡群の駆出率が生存群より有意に低いと言えるか、コメント欄に書いてください。\n",
        "\n",
        "※駆出率（ejection fraction）：心臓のはたらきを示す指標。1回の拍動で心臓から排出される血液の割合を表す。"
      ],
      "metadata": {
        "id": "dzLyFVlfJva1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import gdown\n",
        "from scipy import stats\n",
        "\n",
        "# 心不全患者のデータ\n",
        "url='https://drive.google.com/uc?export=download&id=170BvFfMQJBI8jueqdMXuJiB910bbKSiN'\n",
        "gdown.download(url, 'heart_failure_clinical_records.csv', quiet=False)\n",
        "df = pd.read_csv('heart_failure_clinical_records.csv')\n",
        "print('\\n')\n",
        "#display(df)\n",
        "\n",
        "# 死亡群の駆出率を抽出\n",
        "df_death = df.loc[df['DEATH_EVENT'] == 1, 'ejection_fraction']\n",
        "# 生存群の駆出率を抽出\n",
        "df_alive = df.loc[df['DEATH_EVENT'] == 0, 'ejection_fraction']\n",
        "\n",
        "# t検定: 片側検定で死亡群の駆出率が生存群より低いかを調べる\n",
        "res = stats.ttest_ind(df_death, df_alive, alternative='less')\n",
        "# p値を表示\n",
        "print('t-test p-value: {}'.format(res.pvalue))\n",
        "\n",
        "#【解答欄】\n",
        "# p値にもとづき、死亡群の駆出率は生存群より有意に低いと言えるか？\n",
        "# ここに解答を書いてください。\n",
        "# p値が1.226e-6と小さいため、死亡群の駆出率は生存群より有意に低いと言えそうである。"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FXs9xKdfLq-G",
        "outputId": "f883177c-6314-4a9b-f477-5346ed819a5b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Downloading...\n",
            "From: https://drive.google.com/uc?export=download&id=170BvFfMQJBI8jueqdMXuJiB910bbKSiN\n",
            "To: /content/heart_failure_clinical_records.csv\n",
            "100%|██████████| 11.5k/11.5k [00:00<00:00, 17.8MB/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "\n",
            "t-test p-value: 1.2264487091044224e-06\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "課題2\n",
        "\n",
        "日本の気温データjapan_temperature.csvを用いて、全期間での那覇の気温と札幌の気温を散布図で表示してください。x軸：那覇、y軸：札幌とします。回帰曲線`y = a * x + b`をフィッティングして、係数a, bの値を表示してください。回帰曲線を散布図に重ね描きしてください。\n",
        "\n",
        "回帰曲線は`color='red'`で表示すること。"
      ],
      "metadata": {
        "id": "4A57Tq20Q9Yt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import gdown\n",
        "from matplotlib import pyplot as plt\n",
        "from scipy.optimize import curve_fit\n",
        "\n",
        "# 日本の気温データ\n",
        "url='https://drive.google.com/uc?export=download&id=1WsveWEwULst41FLQmcgfBGQsejWf6COG'\n",
        "gdown.download(url, 'japan_temperature.csv', quiet=False)\n",
        "df = pd.read_csv('japan_temperature.csv')\n",
        "print('\\n')\n",
        "#display(df)\n",
        "\n",
        "# 那覇と札幌、全期間\n",
        "x = df['那覇'].to_numpy()\n",
        "y = df['札幌'].to_numpy()\n",
        "\n",
        "# 回帰曲線の数式を関数として定義\n",
        "def f(x, a, b):\n",
        "    return a * x + b\n",
        "\n",
        "# curve_fit()を使って回帰曲線をフィッティング\n",
        "popt, pcov = curve_fit(f, x, y)\n",
        "\n",
        "# フィッティング後の係数a, bの値\n",
        "print('y = a * x + b')\n",
        "print('a = {}'.format(popt[0]))\n",
        "print('b = {}'.format(popt[1]))\n",
        "\n",
        "# 回帰曲線の縦軸の値を計算\n",
        "y_fit = f(x, popt[0], popt[1])\n",
        "\n",
        "# 散布図\n",
        "plt.scatter(x, y)\n",
        "# 回帰曲線\n",
        "plt.plot(x, y_fit, color='red')\n",
        "plt.xlabel('Naha')\n",
        "plt.ylabel('Sapporo')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 628
        },
        "id": "R9oTfhxLQ5uq",
        "outputId": "954dc263-6dfc-463e-8fad-ce2a899162d4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Downloading...\n",
            "From: https://drive.google.com/uc?export=download&id=1WsveWEwULst41FLQmcgfBGQsejWf6COG\n",
            "To: /content/japan_temperature.csv\n",
            "100%|██████████| 52.8k/52.8k [00:00<00:00, 50.6MB/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "\n",
            "y = a * x + b\n",
            "a = 2.1421922999531757\n",
            "b = -40.35784934269111\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Sapporo')"
            ]
          },
          "metadata": {},
          "execution_count": 3
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "課題3\n",
        "\n",
        "以下のコードは、心不全患者のデータを用いて、死亡予測の分類モデルの性能をロジスティック回帰とランダムフォレストの間で比較しています。乱数シードを42とした場合、ランダムフォレストの方がロジスティック回帰よりもROC AUCの値が高くなりました。\n",
        "\n",
        "この性能差の有意性を統計検定で調べたいです。乱数シードの値を10種類試して、ロジスティック回帰とランダムフォレストそれぞれについてROC AUCの値を10個求めてください。これらのROC AUCの値について、対応のあるノンパラメトリック検定の片側検定を行いp値を計算してください。p値にもとづき、ランダムフォレストの分類性能はロジスティック回帰より有意に高いと言えるか、コメント欄に書いてください。\n",
        "\n",
        "10種類の乱数シードの値、学習データの割合、CVの分割数、ハイパラの探索範囲などの条件は問題文から変更しないこと。また、seedを変えて繰り返す際は、最初のtrain_test_split()の行程を含めて全体を繰り返すこと。"
      ],
      "metadata": {
        "id": "kcw8jrmXR-_N"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#### 問題文のコード: このセルは変更しない\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import gdown\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.metrics import roc_auc_score\n",
        "from sklearn.model_selection import KFold, cross_val_score\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "\n",
        "# 心不全患者のデータ\n",
        "url='https://drive.google.com/uc?export=download&id=170BvFfMQJBI8jueqdMXuJiB910bbKSiN'\n",
        "gdown.download(url, 'heart_failure_clinical_records.csv', quiet=False)\n",
        "df = pd.read_csv('heart_failure_clinical_records.csv')\n",
        "print('\\n')\n",
        "#display(df)\n",
        "\n",
        "seed = 42\n",
        "\n",
        "# データフレームをX,yに分ける\n",
        "df_X = df.iloc[:, 0:-1] # 最初から最後の列の1つ前まで\n",
        "df_y = df.iloc[:, -1] # 最後の列\n",
        "\n",
        "# X,yをそれぞれ学習データとテストデータに分ける\n",
        "X_train,  X_test, y_train, y_test = train_test_split(df_X, df_y, train_size=0.7, shuffle=True, random_state=seed)\n",
        "\n",
        "# データの前処理\n",
        "scaler = StandardScaler()\n",
        "X_train = scaler.fit_transform(X_train)\n",
        "X_test = scaler.transform(X_test)\n",
        "\n",
        "# ロジスティック回帰の性能評価\n",
        "print('Logistic Regression')\n",
        "model1 = LogisticRegression()\n",
        "param_grid1 = {'C': [0.01, 0.02, 0.05, 0.1, 0.2, 0.5, 1, 2, 5, 10]}\n",
        "cv1 = KFold(n_splits=4, shuffle=True, random_state=seed)\n",
        "gs1 = GridSearchCV(estimator=model1, param_grid=param_grid1, cv=cv1, scoring='roc_auc')\n",
        "gs1.fit(X=X_train, y=y_train)\n",
        "print('best hyperparameter: {}'.format(gs1.best_params_))\n",
        "y_test_prob1 = gs1.predict_proba(X_test)\n",
        "roc_auc_test1 = roc_auc_score(y_true=y_test, y_score=y_test_prob1[:, 1])\n",
        "print('ROC AUC on test data: {}\\n'.format(roc_auc_test1))\n",
        "\n",
        "# ランダムフォレストの性能評価\n",
        "print('Random Forest')\n",
        "model2 = RandomForestClassifier(random_state=seed)\n",
        "param_grid2 = {'n_estimators': [10, 20, 50, 100]}\n",
        "cv2 = KFold(n_splits=4, shuffle=True, random_state=seed)\n",
        "gs2 = GridSearchCV(estimator=model2, param_grid=param_grid2, cv=cv2, scoring='roc_auc')\n",
        "gs2.fit(X=X_train, y=y_train)\n",
        "print('best hyperparameter: {}'.format(gs2.best_params_))\n",
        "y_test_prob2 = gs2.predict_proba(X_test)\n",
        "roc_auc_test2 = roc_auc_score(y_true=y_test, y_score=y_test_prob2[:, 1])\n",
        "print('ROC AUC on test data: {}\\n'.format(roc_auc_test2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GiXViEUj90yb",
        "outputId": "707f1383-1180-497a-894b-30b8ca26c6a2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Downloading...\n",
            "From: https://drive.google.com/uc?export=download&id=170BvFfMQJBI8jueqdMXuJiB910bbKSiN\n",
            "To: /content/heart_failure_clinical_records.csv\n",
            "100%|██████████| 11.5k/11.5k [00:00<00:00, 13.2MB/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "\n",
            "Logistic Regression\n",
            "best hyperparameter: {'C': 0.05}\n",
            "ROC AUC on test data: 0.7623661397246303\n",
            "\n",
            "Random Forest\n",
            "best hyperparameter: {'n_estimators': 100}\n",
            "ROC AUC on test data: 0.7950025497195309\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#### 解答欄: このセルにコードを書く\n",
        "\n",
        "from scipy import stats\n",
        "\n",
        "# 10種類の乱数シード(変更しない)\n",
        "seed_list = [42, 53, 31, 24, 13, 35, 0, 1, 2, 3]\n",
        "# ここにロジスティック回帰のROC AUCを記録\n",
        "roc_auc_list1 = []\n",
        "# ここにランダムフォレストのROC AUCを記録\n",
        "roc_auc_list2 = []\n",
        "\n",
        "for seed in seed_list:\n",
        "  print('Evaluating for seed {}'.format(seed))\n",
        "  X_train,  X_test, y_train, y_test = train_test_split(df_X, df_y, train_size=0.7, shuffle=True, random_state=seed)\n",
        "  scaler = StandardScaler()\n",
        "  X_train = scaler.fit_transform(X_train)\n",
        "  X_test = scaler.transform(X_test)\n",
        "\n",
        "  model1 = LogisticRegression()\n",
        "  param_grid1 = {'C': [0.01, 0.02, 0.05, 0.1, 0.2, 0.5, 1, 2, 5, 10]}\n",
        "  cv1 = KFold(n_splits=4, shuffle=True, random_state=seed)\n",
        "  gs1 = GridSearchCV(estimator=model1, param_grid=param_grid1, cv=cv1, scoring='roc_auc')\n",
        "  gs1.fit(X=X_train, y=y_train)\n",
        "  y_test_prob1 = gs1.predict_proba(X_test)\n",
        "  roc_auc_test1 = roc_auc_score(y_true=y_test, y_score=y_test_prob1[:, 1])\n",
        "  roc_auc_list1.append(roc_auc_test1)\n",
        "\n",
        "  model2 = RandomForestClassifier(random_state=seed)\n",
        "  param_grid2 = {'n_estimators': [10, 20, 50, 100]}\n",
        "  cv2 = KFold(n_splits=4, shuffle=True, random_state=seed)\n",
        "  gs2 = GridSearchCV(estimator=model2, param_grid=param_grid2, cv=cv2, scoring='roc_auc')\n",
        "  gs2.fit(X=X_train, y=y_train)\n",
        "  y_test_prob2 = gs2.predict_proba(X_test)\n",
        "  roc_auc_test2 = roc_auc_score(y_true=y_test, y_score=y_test_prob2[:, 1])\n",
        "  roc_auc_list2.append(roc_auc_test2)\n",
        "\n",
        "print('ROC AUC for Logistic Regression: {}'.format(roc_auc_list1))\n",
        "print('ROC AUC for Random Forest: {}'.format(roc_auc_list2))\n",
        "\n",
        "# 対応のあるノンパラメトリック検定なのでWilcoxon符号順位検定を使う。\n",
        "# ランダムフォレストがロジスティック回帰より高性能か検定したいので\n",
        "# 以下にように引数を指定する。\n",
        "res = stats.wilcoxon(roc_auc_list2, roc_auc_list1, alternative='greater')\n",
        "# p値を表示\n",
        "print('p-value: {}'.format(res.pvalue))\n",
        "\n",
        "#【解答欄】\n",
        "# ランダムフォレストの分類性能はロジスティック回帰より有意に高いと言えるか？\n",
        "# ここに解答を書いてください。\n",
        "# p値が0.385と大きいため、ランダムフォレストはロジスティック回帰より有意に高性能とは言えない。"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XQJklmrhbo5t",
        "outputId": "c23de6c7-5b10-4264-d0c0-badbcc66c9e7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Evaluating for seed 42\n",
            "Evaluating for seed 53\n",
            "Evaluating for seed 31\n",
            "Evaluating for seed 24\n",
            "Evaluating for seed 13\n",
            "Evaluating for seed 35\n",
            "Evaluating for seed 0\n",
            "Evaluating for seed 1\n",
            "Evaluating for seed 2\n",
            "Evaluating for seed 3\n",
            "ROC AUC for Logistic Regression: [np.float64(0.7623661397246303), np.float64(0.7713133640552995), np.float64(0.689594356261023), np.float64(0.8173076923076923), np.float64(0.7523041474654378), np.float64(0.7824808935920047), np.float64(0.7494239631336405), np.float64(0.7842548076923077), np.float64(0.8156565656565656), np.float64(0.7580553985302431)]\n",
            "ROC AUC for Random Forest: [np.float64(0.7950025497195309), np.float64(0.7779377880184332), np.float64(0.7433862433862434), np.float64(0.7926682692307692), np.float64(0.7819700460829493), np.float64(0.7472075249853027), np.float64(0.7456797235023043), np.float64(0.6977163461538461), np.float64(0.8308080808080809), np.float64(0.7809496890898813)]\n",
            "p-value: 0.384765625\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "課題4\n",
        "\n",
        "以下のコードは、長さ100のリストに対してバブルソートの計算時間（10回実行の平均計算時間）を計測しています。\n",
        "\n",
        "「アルゴリズム」の講義で学んだように、バブルソートの計算時間はリストの長さ$n$に対して$O(n^2)$となります。回帰曲線のフィッティングを用いて、この関係を確認してみましょう。リストの長さ`[2, 5, 10, 20, 50, 100, 200, 500, 1000, 2000, 3000, 4000, 5000]`について同様に計算時間を計測して、リストの長さに対する計算時間の関係を散布図で表示してください。x軸：リストの長さ、y軸：計算時間とします。回帰曲線`y = a * x**2 + b`をフィッティングして、係数a, bの値を表示してください。回帰曲線を散布図に重ね描きしてください。\n",
        "\n",
        "回帰曲線は`color='red'`で表示すること。"
      ],
      "metadata": {
        "id": "bo6zPIlOUBZV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#### 問題文のコード: このセルは変更しない\n",
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import random\n",
        "import time\n",
        "\n",
        "# 乱数からなる指定された長さのリストを作成する関数\n",
        "# 「プログラミングⅡ」第3回レポート課題より\n",
        "def random_list(n):\n",
        "    A = []\n",
        "    for i in range(n):\n",
        "        r = random.randint(0, 1000000) # 0から1000000までのランダムな整数を1個生成\n",
        "        A.append(r)\n",
        "    return A\n",
        "\n",
        "# バブルソートの関数\n",
        "# 「プログラミングⅡ」第3回レポート課題より\n",
        "def bubble_sort(A):\n",
        "    for i in range(len(A) - 1):\n",
        "        for j in range(len(A) - 1 - i):\n",
        "            if (A[j] > A[j+1]):\n",
        "                temp = A[j]\n",
        "                A[j] = A[j+1]\n",
        "                A[j+1] = temp\n",
        "    return A\n",
        "\n",
        "\n",
        "# 10回の計算時間\n",
        "t_bubble = np.zeros(10)\n",
        "for j in range(10):\n",
        "    A = random_list(100)\n",
        "    start = time.perf_counter() # 開始時刻\n",
        "    bubble_sort(A)\n",
        "    end = time.perf_counter() # 終了時刻\n",
        "    t_bubble[j] = end - start\n",
        "\n",
        "# 10回の平均計算時間\n",
        "comp_time_bubble = np.mean(t_bubble)\n",
        "print('computation time {}'.format(comp_time_bubble))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Kktv5pk7d_Hy",
        "outputId": "ed8b01f4-b0cd-4fd8-df2f-d083bdb24ebe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "computation time 0.0008570196000050601\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#### 解答欄: このセルにコードを書く\n",
        "\n",
        "from matplotlib import pyplot as plt\n",
        "from scipy.optimize import curve_fit\n",
        "\n",
        "# 計算時間の測定条件\n",
        "# 以下の長さに対して計算時間を計測すること。\n",
        "n = [2, 5, 10, 20, 50, 100, 200, 500, 1000, 2000, 3000, 4000, 5000]\n",
        "# それぞれの長さについて、リストの作成、バブルソート、計算時間測定を10回繰り返すこと。\n",
        "m = 10\n",
        "# 長さn[i]に対する10回の平均計算時間をcomp_time_bubble[i]に格納すること。\n",
        "comp_time_bubble = []\n",
        "\n",
        "# 計算時間の測定\n",
        "for i in range(len(n)): # それぞれの長さについて\n",
        "    t_bubble = np.zeros(m)\n",
        "    for j in range(m): # m回繰り返す\n",
        "        A = random_list(n[i])\n",
        "        start = time.perf_counter() # 開始時刻\n",
        "        bubble_sort(A)\n",
        "        end = time.perf_counter() # 終了時刻\n",
        "        t_bubble[j] = end - start\n",
        "    comp_time_bubble.append(np.mean(t_bubble)) # 平均計算時間\n",
        "    # print()で平均計算時間を表示\n",
        "    print('n = {}, computation time = {}'.format(n[i], comp_time_bubble[i]))\n",
        "\n",
        "\n",
        "x = np.array(n)\n",
        "y = np.array(comp_time_bubble)\n",
        "\n",
        "# 回帰曲線の数式を関数として定義\n",
        "def f(x, a, b):\n",
        "    return a * x**2 + b\n",
        "\n",
        "# curve_fit()を使って回帰曲線をフィッティング\n",
        "popt, pcov = curve_fit(f, x, y)\n",
        "\n",
        "# フィッティング後の係数a, bの値\n",
        "print('y = a * x**2 + b')\n",
        "print('a = {}'.format(popt[0]))\n",
        "print('b = {}'.format(popt[1]))\n",
        "\n",
        "# xの最小値から最大値まで等間隔に100個の値\n",
        "x_fit = np.arange(x.min(), x.max(), (x.max()-x.min())/100)\n",
        "# 回帰曲線の値y_fit\n",
        "y_fit = f(x_fit, popt[0], popt[1])\n",
        "\n",
        "# 散布図\n",
        "plt.scatter(x, y)\n",
        "# 回帰曲線\n",
        "plt.plot(x_fit, y_fit, color='red')\n",
        "plt.xlabel('n')\n",
        "plt.ylabel('computation time')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 754
        },
        "id": "0AGY52bSeS5p",
        "outputId": "57300e9c-5466-44b7-ccbd-d4e68502c724"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "n = 2, computation time = 1.7926999987594171e-06\n",
            "n = 5, computation time = 3.757399991854982e-06\n",
            "n = 10, computation time = 8.8968000056866e-06\n",
            "n = 20, computation time = 2.6264000007358844e-05\n",
            "n = 50, computation time = 0.00015584190000481613\n",
            "n = 100, computation time = 0.00043990999997731703\n",
            "n = 200, computation time = 0.0015747866999959114\n",
            "n = 500, computation time = 0.012562660199995435\n",
            "n = 1000, computation time = 0.04781197749998682\n",
            "n = 2000, computation time = 0.2059939899000085\n",
            "n = 3000, computation time = 0.5942277594000018\n",
            "n = 4000, computation time = 1.0280076810000025\n",
            "n = 5000, computation time = 1.4326973088000046\n",
            "y = a * x**2 + b\n",
            "a = 5.962634008760404e-08\n",
            "b = 0.0019996482276718464\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'computation time')"
            ]
          },
          "metadata": {},
          "execution_count": 11
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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aNDA6fU2bdrg5+fndK937tzJvn37nO711q1bncLkypUrCQoKokmTJo5r/voZp66pyH8G7HY7+fn5usdu1KVLF7Zu3UpKSorj0bZtW/r06eM41r12v6NHj7J7924iIiI8579ntwxLruAWLFhgBAQEGLNmzTK2b99uPProo0b16tWdRoqLs9zcXGPz5s3G5s2bDcAYP368sXnzZmPv3r2GYZhTwatXr258+OGHxg8//GDceeedxU4Fb9WqlfH9998bX3/9tXHllVc6TQXPysoywsLCjL59+xrbtm0zFixYYFSpUqVCTQUfPHiwERwcbKxevdppWufx48cd1wwaNMioV6+esWrVKmPDhg1GTEyMERMT43j91LTOm2++2UhJSTGSkpKMWrVqFTut85lnnjF++uknY9KkSRVq6uyoUaOMNWvWGKmpqcYPP/xgjBo1yrDZbMbnn39uGIbucWn662wpw9C9doennnrKWL16tZGammp88803RmxsrFGzZk0jMzPTMAzPuMcKN27y1ltvGfXq1TP8/f2NqKgo47vvvrO6pHLtyy+/NIAzHv379zcMw5wO/sILLxhhYWFGQECA0aVLF2Pnzp1On/H7778bvXr1MqpWrWoEBQUZAwYMMHJzc52u2bJli3HdddcZAQEBRp06dYxx48aV1Y9YLhR3jwHj3XffdVxz4sQJ4/HHHzdCQkKMKlWqGHfddZeRlpbm9Dm//vqrccsttxiVK1c2atasaTz11FNGYWGh0zVffvml0bJlS8Pf39+4/PLLnb7D2z300EPGZZddZvj7+xu1atUyunTp4gg2hqF7XJr+Hm50ry9ez549jYiICMPf39+oU6eO0bNnT2PXrl2O1z3hHtsMwzDc0wYkIiIiYj2NuRERERGvonAjIiIiXkXhRkRERLyKwo2IiIh4FYUbERER8SoKNyIiIuJVFG5ERETEqyjciIiIiFdRuBERERGvonAjIiIiXkXhRkRERLxKJasLEBG5WDfeeCPNmzcnMDCQGTNm4O/vz6BBg3jxxRetLk1ELKCWGxHxCrNnz+aSSy7h+++/59VXX+Wll15i5cqVVpclIhbQruAi4vFuvPFGioqK+OqrrxznoqKi6Ny5M+PGjbOwMhGxglpuRMQrNG/e3Ol5REQEmZmZFlUjIlZSuBERr+Dn5+f03GazYbfbLapGRKykcCMiIiJeReFGREREvIrCjYiIiHgVzZYSERERr6KWGxEREfEqCjciIiLiVRRuRERExKso3IiIiIhXUbgRERERr6JwIyIiIl5F4UZERES8isKNiIiIeBWFGxEREfEqCjciIiLiVRRuRERExKv8P061Y+9KpF42AAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ]
    }
  ]
}
