{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/kurihara-ryo/cesarean-pasaran/blob/main/%E3%80%90%E8%A7%A3%E7%AD%94%E4%BE%8B%E3%80%91%E7%99%BA%E5%B1%95%E8%AA%B2%E9%A1%8C_%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E2%85%A2_1516.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 各課題について、コメントを参考にしてプログラムを書いてください。\n",
        "# 実行ボタンを押して、プログラムが正しく実行されることを確認してください。\n",
        "# 提出の際は、コメントを削除せずに残してください。\n",
        "# 全ての課題を解けなかった場合でも、〆切までに提出すれば途中点が付与されます。"
      ],
      "metadata": {
        "id": "iXcVPPdWXAzt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "課題1\n",
        "\n",
        "米国の医療費のデータmedical_costs.csvについて、pytorchによる回帰モデルを作成してください。ネットワーク構造、活性化関数については講義資料を参照してください。損失関数には平均2乗誤差`nn.MSELoss()`を使用し、学習率は0.01、バッチサイズは5とします。それ以外の設定については、コード内の指定にしたがってください。1000エポック学習を行い、学習後の損失関数の値を表示してください。"
      ],
      "metadata": {
        "id": "dzLyFVlfJva1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#### 問題文のコード: このセルは変更しない\n",
        "\n",
        "# medical_costs.csvは、\n",
        "# 米国の健康保険加入者の医療費について記載したデータです。\n",
        "# 各加入者について、年齢、BMI、子どもの数、喫煙の有無などの個人情報と、\n",
        "# 健康保険で負担された医療費の金額(charges、単位は千ドル)が記載されています。\n",
        "# このデータを使って、加入者の個人情報から医療費を予測する回帰モデルを作ります。\n",
        "#\n",
        "# データの出典：\n",
        "# Kaggle Medical Cost Personal Datasetsから一部改変\n",
        "# https://www.kaggle.com/datasets/mirichoi0218/insurance\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import gdown\n",
        "url='https://drive.google.com/uc?export=download&id=1ZfRACR6UV3VE2teWDcFhjgOitHUdH6vR'\n",
        "gdown.download(url, 'medical_costs.csv', quiet=False)\n",
        "print('\\n')\n",
        "df = pd.read_csv('medical_costs.csv')\n",
        "\n",
        "# sexやsmokerの列には、male/female、yes/noなどの文字列が入っています。\n",
        "# データフレームのメソッドmap()を用いて整数に変換します。\n",
        "df['sex'] = df['sex'].map({'male': 1, 'female': 0})\n",
        "df['smoker'] = df['smoker'].map({'yes': 1, 'no': 0})\n",
        "display(df)\n",
        "\n",
        "# 乱数シード\n",
        "seed = 42\n",
        "\n",
        "# sklearnを使って、学習データとテストデータの分割や前処理を行います\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "# データフレームをX,yに分けて、numpyアレイに変換\n",
        "df_X = df.iloc[:, 0:-1] # 最初から最後の列の1つ前まで\n",
        "df_y = df.iloc[:, -1] # 最後の列\n",
        "X_np = df_X.to_numpy()\n",
        "y_np = df_y.to_numpy()\n",
        "\n",
        "# X,yをそれぞれ学習データとテストデータに分ける\n",
        "X_train_np,  X_test_np, y_train_np, y_test_np = train_test_split(X_np, y_np, train_size=0.8, shuffle=True, random_state=seed)\n",
        "print('X_train shape {}'.format(X_train_np.shape))\n",
        "print('X_test shape {}'.format(X_test_np.shape))\n",
        "print('y_train shape {}'.format(y_train_np.shape))\n",
        "print('y_test shape {}'.format(y_test_np.shape))\n",
        "\n",
        "# X_trainの前処理\n",
        "# 標準化：各特徴量を平均0、標準偏差1となるように変換\n",
        "scaler = StandardScaler()\n",
        "X_train_np = scaler.fit_transform(X_train_np)\n",
        "\n",
        "# X_testの前処理\n",
        "# 学習データと同じ基準で変換するために、X_trainに使ったインスタンスを流用\n",
        "X_test_np = scaler.transform(X_test_np)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 602
        },
        "id": "imbZqVziij4n",
        "outputId": "e3c61dbe-033c-499b-cb40-6b513de173b6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Downloading...\n",
            "From: https://drive.google.com/uc?export=download&id=1ZfRACR6UV3VE2teWDcFhjgOitHUdH6vR\n",
            "To: /content/medical_costs.csv\n",
            "100%|██████████| 10.6k/10.6k [00:00<00:00, 5.65MB/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "     age  sex     bmi  children  smoker    charges\n",
              "0     37    1  29.830         2       0   6.406411\n",
              "1     25    1  26.220         0       0   2.721321\n",
              "2     52    0  30.780         1       0  10.797336\n",
              "3     23    1  23.845         0       0   2.395172\n",
              "4     60    0  36.005         0       0  13.228847\n",
              "..   ...  ...     ...       ...     ...        ...\n",
              "319   62    1  26.695         0       1  28.101333\n",
              "320   61    1  33.535         0       0  13.143337\n",
              "321   42    0  32.870         0       0   7.050021\n",
              "322   23    0  24.225         2       0  22.395744\n",
              "323   18    0  31.920         0       0   2.205981\n",
              "\n",
              "[324 rows x 6 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-aaa6ae09-1e9a-4d32-9506-2c62fecbd063\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>bmi</th>\n",
              "      <th>children</th>\n",
              "      <th>smoker</th>\n",
              "      <th>charges</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>37</td>\n",
              "      <td>1</td>\n",
              "      <td>29.830</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>6.406411</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>25</td>\n",
              "      <td>1</td>\n",
              "      <td>26.220</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.721321</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>52</td>\n",
              "      <td>0</td>\n",
              "      <td>30.780</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>10.797336</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>23</td>\n",
              "      <td>1</td>\n",
              "      <td>23.845</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.395172</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>60</td>\n",
              "      <td>0</td>\n",
              "      <td>36.005</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>13.228847</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>319</th>\n",
              "      <td>62</td>\n",
              "      <td>1</td>\n",
              "      <td>26.695</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>28.101333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>320</th>\n",
              "      <td>61</td>\n",
              "      <td>1</td>\n",
              "      <td>33.535</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>13.143337</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>321</th>\n",
              "      <td>42</td>\n",
              "      <td>0</td>\n",
              "      <td>32.870</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7.050021</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>322</th>\n",
              "      <td>23</td>\n",
              "      <td>0</td>\n",
              "      <td>24.225</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>22.395744</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>323</th>\n",
              "      <td>18</td>\n",
              "      <td>0</td>\n",
              "      <td>31.920</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>2.205981</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>324 rows × 6 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-aaa6ae09-1e9a-4d32-9506-2c62fecbd063')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-aaa6ae09-1e9a-4d32-9506-2c62fecbd063 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-aaa6ae09-1e9a-4d32-9506-2c62fecbd063');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-bcc70db0-001b-478a-887b-5915f2ded288\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bcc70db0-001b-478a-887b-5915f2ded288')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-bcc70db0-001b-478a-887b-5915f2ded288 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_28d68fe8-6777-4495-a970-d23f905f7dc6\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_28d68fe8-6777-4495-a970-d23f905f7dc6 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 324,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 18,\n        \"max\": 64,\n        \"num_unique_values\": 46,\n        \"samples\": [\n          46,\n          40,\n          47\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.93751330426977,\n        \"min\": 15.96,\n        \"max\": 48.07,\n        \"num_unique_values\": 181,\n        \"samples\": [\n          19.95,\n          41.23\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"children\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          2,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoker\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"charges\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.255803065578466,\n        \"min\": 1.6947964,\n        \"max\": 58.57107448,\n        \"num_unique_values\": 324,\n        \"samples\": [\n          3.26884665,\n          3.16745585\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "X_train shape (259, 5)\n",
            "X_test shape (65, 5)\n",
            "y_train shape (259,)\n",
            "y_test shape (65,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#### 解答欄: このセルにコードを書く\n",
        "\n",
        "# 必要なモジュール一式を準備\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "from torch.utils.data import TensorDataset, DataLoader\n",
        "\n",
        "# 乱数シードの設定\n",
        "torch.manual_seed(seed)\n",
        "\n",
        "# ネットワーク構造の定義\n",
        "# 隠れ層を1つ(ユニット数3)、活性化関数をSigmoidに設定\n",
        "model = nn.Sequential(\n",
        "    nn.Linear(5, 3), # 入力は長さ5のベクトル\n",
        "    nn.Sigmoid(),\n",
        "    nn.Linear(3, 1),\n",
        ")\n",
        "\n",
        "# 損失関数の定義\n",
        "# 平均2乗誤差を使用\n",
        "criterion = nn.MSELoss()\n",
        "\n",
        "# SGDの定義\n",
        "# 学習率を0.01に設定\n",
        "optimizer = optim.SGD(model.parameters(), lr=0.01)\n",
        "\n",
        "# テンソルへの変換\n",
        "X_train = torch.tensor(X_train_np, dtype=torch.float32)\n",
        "y_train = torch.tensor(y_train_np, dtype=torch.float32).reshape(-1, 1)\n",
        "X_test = torch.tensor(X_test_np, dtype=torch.float32)\n",
        "y_test = torch.tensor(y_test_np, dtype=torch.float32).reshape(-1, 1)\n",
        "\n",
        "# バッチサイズの指定\n",
        "# 今回はバッチサイズを5に設定\n",
        "train_dataset = TensorDataset(X_train, y_train)\n",
        "train_loader = DataLoader(train_dataset, batch_size=5)\n",
        "\n",
        "# 学習\n",
        "for epoch in range(1000):\n",
        "    epoch_loss = 0.0\n",
        "    for X_batch, y_batch in train_loader:\n",
        "        optimizer.zero_grad()\n",
        "        output = model(X_batch)\n",
        "        loss = criterion(output, y_batch)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "        epoch_loss += loss.item() * X_batch.size(0)\n",
        "    avg_loss = epoch_loss / len(train_loader.dataset)\n",
        "    if epoch % 100 == 0:\n",
        "        print('Epoch {}, Loss: {}'.format(epoch, avg_loss))\n",
        "\n",
        "# 学習後の損失関数の値\n",
        "print('Loss after training: {}'.format(avg_loss))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6HKqzSrzi0xf",
        "outputId": "46a1c8c8-b3c5-416e-c644-e6094631a033"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 0, Loss: 142.3352897360518\n",
            "Epoch 100, Loss: 29.449305363143274\n",
            "Epoch 200, Loss: 27.34581360255429\n",
            "Epoch 300, Loss: 26.91001729868554\n",
            "Epoch 400, Loss: 26.655413374477373\n",
            "Epoch 500, Loss: 26.479055060843244\n",
            "Epoch 600, Loss: 26.50181698661053\n",
            "Epoch 700, Loss: 26.48889556078377\n",
            "Epoch 800, Loss: 26.46189267755015\n",
            "Epoch 900, Loss: 26.431421445603537\n",
            "Loss after training: 26.400394604012774\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "課題2\n",
        "\n",
        "課題1で学習したモデルを用いて、テストデータに対する決定係数$R^2$を計算して表示してください。"
      ],
      "metadata": {
        "id": "uQ0p87vlyYNf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# テストデータに対する精度評価\n",
        "from sklearn.metrics import r2_score\n",
        "\n",
        "# テストデータの予測値を計算\n",
        "with torch.no_grad():\n",
        "    y_test_pred = model(X_test) # shape (N, 1)\n",
        "    y_test_pred_np = y_test_pred.squeeze(1).numpy() # shape (N, )\n",
        "\n",
        "# R2の評価\n",
        "print('y_test_pred:\\n{}'.format(y_test_pred_np))\n",
        "r2_test = r2_score(y_true=y_test_np, y_pred=y_test_pred_np)\n",
        "print('R2 on test data: {}'.format(r2_test))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-eO60zcdnULs",
        "outputId": "e721f535-43c1-409c-ee55-a38c711b4fa2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "y_test_pred:\n",
            "[ 9.47968006e+00  5.58177662e+00  1.63266106e+01  5.22607517e+00\n",
            "  9.50523472e+00  1.04565210e+01  1.57343607e+01  6.03440189e+00\n",
            "  1.70569916e+01  1.82599258e+01  9.43042469e+00  1.20644007e+01\n",
            "  1.83616791e+01  1.00719538e+01  7.70802212e+00  3.34125938e+01\n",
            "  6.82066441e+00  1.12824545e+01  4.87711048e+00  3.56011620e+01\n",
            "  1.21561728e+01  1.63769417e+01  9.81563091e+00  3.94443474e+01\n",
            "  1.82735100e+01  2.15582809e+01  3.94967117e+01  9.84829807e+00\n",
            "  3.91296883e+01  3.49211159e+01  4.87642956e+00  1.25363779e+01\n",
            "  5.04926586e+00  9.40708828e+00  6.22283268e+00  5.49780369e+00\n",
            "  3.94665871e+01  8.48149967e+00  1.24868269e+01  7.54581928e+00\n",
            "  1.02584181e+01  3.78429184e+01  6.70693302e+00  8.49071980e+00\n",
            "  1.96577835e+01  1.21952600e+01  1.10518026e+01  1.83124847e+01\n",
            "  1.83183556e+01  9.48292255e+00  5.15026951e+00 -1.94625854e-02\n",
            "  4.96825504e+00  9.61344242e+00  1.19805651e+01  1.83302650e+01\n",
            "  7.18832684e+00  7.60829067e+00  5.02487659e+00  5.00135899e+00\n",
            "  3.93981133e+01  1.34680986e+01  9.13392925e+00  1.82684364e+01\n",
            "  4.91905689e+00]\n",
            "R2 on test data: 0.7548020275654674\n"
          ]
        }
      ]
    }
  ]
}
