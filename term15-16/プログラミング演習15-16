{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/kurihara-ryo/cesarean-pasaran/blob/main/%E3%80%90%E8%A7%A3%E7%AD%94%E4%BE%8B%E3%80%91%E6%BC%94%E7%BF%92%E8%AA%B2%E9%A1%8C_%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E2%85%A2_1516.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#【課題】と書いてあるセルでは、自分でプログラムを作成してください。\n",
        "# 実行ボタンを押してプログラムの動作確認を行い、Google Classroomから提出してください。\n",
        "# 提出する際は、コメント(#から始まる部分)を削除せずに残してください。\n",
        "# 〆切が近いので、後回しにせず講義時間中に手を動かしてプログラムを作成すること。"
      ],
      "metadata": {
        "id": "Q5Oz_bNHEFRp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#### pytorch\n",
        "# 第11,12回レポート課題で扱った小さなニューラルネットをpytorchで書いてみます。\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import gdown\n",
        "\n",
        "# 学習データの準備\n",
        "# 各行が1個の学習データを表している。\n",
        "# 入力xは長さ2のベクトル(x1, x2)として記載されている。\n",
        "# 各xについて予測対象yの真の値が記載されている。\n",
        "# 2クラス分類なのでyは0, 1どちらか。\n",
        "# 学習データ数は50個。\n",
        "url='https://drive.google.com/uc?export=download&id=17RctbyvrxeSI2gnriFf3tGuWWvPxzol8'\n",
        "gdown.download(url, 'kadai1_data_train.csv', quiet=False)\n",
        "print('\\n')\n",
        "df_train = pd.read_csv('kadai1_data_train.csv')\n",
        "display(df_train)\n",
        "\n",
        "# 学習データをX_trainとy_trainに分けて、numpyアレイに変換\n",
        "# X_trainは50行2列の2次元アレイ、y_trainは長さ50の1次元アレイ\n",
        "X_train_df = df_train.iloc[:, :-1]\n",
        "y_train_df = df_train.iloc[:, -1]\n",
        "X_train_np = X_train_df.to_numpy()\n",
        "y_train_np = y_train_df.to_numpy()\n",
        "print('X_train:\\n{}\\n'.format(X_train_np))\n",
        "print('y_train:\\n{}\\n'.format(y_train_np))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "xQdxog4zhykY",
        "outputId": "08fc135f-223b-4a7e-f874-103924b84271"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Downloading...\n",
            "From: https://drive.google.com/uc?export=download&id=17RctbyvrxeSI2gnriFf3tGuWWvPxzol8\n",
            "To: /content/kadai1_data_train.csv\n",
            "100%|██████████| 2.09k/2.09k [00:00<00:00, 4.89MB/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "          x1        x2  y\n",
              "0   0.867181  1.019686  0\n",
              "1   0.147789  0.948173  1\n",
              "2   0.960789  0.853649  0\n",
              "3  -0.054438  0.011092  0\n",
              "4   1.091540  1.032875  0\n",
              "5  -0.046342  0.953427  1\n",
              "6   0.082254  0.877916  1\n",
              "7   0.858463 -0.042065  1\n",
              "8   1.157921  1.076743  0\n",
              "9   0.081253  0.135624  0\n",
              "10 -0.115099  1.037570  1\n",
              "11 -0.101283  0.031425  0\n",
              "12  0.932308  0.061168  1\n",
              "13  1.024196 -0.191328  1\n",
              "14  1.036164 -0.064512  1\n",
              "15 -0.046947  0.054256  0\n",
              "16 -0.261975  1.082190  1\n",
              "17  0.034362 -0.176304  0\n",
              "18 -0.052976  0.051327  0\n",
              "19 -0.007201  1.100353  1\n",
              "20  0.000511  0.976541  1\n",
              "21  0.939829  1.185228  0\n",
              "22 -0.090802  0.858770  1\n",
              "23 -0.001350 -0.105771  0\n",
              "24  0.952083 -0.018566  1\n",
              "25 -0.003583  0.156464  0\n",
              "26  0.032408  0.961492  1\n",
              "27  1.006753  0.857525  0\n",
              "28  0.049671 -0.013826  0\n",
              "29  0.929795 -0.032766  1\n",
              "30  1.103100  1.093128  0\n",
              "31  0.889367  0.880379  0\n",
              "32  1.009176  0.801243  0\n",
              "33  0.033126  1.097555  1\n",
              "34  0.009708  1.096864  1\n",
              "35  0.064769  1.152303  1\n",
              "36 -0.011565  0.969890  1\n",
              "37  0.976585 -0.023414  1\n",
              "38 -0.021967  0.035711  0\n",
              "39  1.036140  1.153804  0\n",
              "40  0.953936  1.105712  0\n",
              "41  0.029612  0.026106  0\n",
              "42  1.146565 -0.022578  1\n",
              "43  0.852148 -0.071984  1\n",
              "44  1.020886 -0.195967  1\n",
              "45  0.965729  0.919772  0\n",
              "46  0.073847  0.017137  0\n",
              "47  0.827508  0.943771  0\n",
              "48  0.919151 -0.050176  1\n",
              "49  0.939936 -0.029169  1"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-38d1d5e8-2372-4063-bcba-2da35d3766e9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>x1</th>\n",
              "      <th>x2</th>\n",
              "      <th>y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.867181</td>\n",
              "      <td>1.019686</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.147789</td>\n",
              "      <td>0.948173</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.960789</td>\n",
              "      <td>0.853649</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-0.054438</td>\n",
              "      <td>0.011092</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1.091540</td>\n",
              "      <td>1.032875</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>-0.046342</td>\n",
              "      <td>0.953427</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>0.082254</td>\n",
              "      <td>0.877916</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>0.858463</td>\n",
              "      <td>-0.042065</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>1.157921</td>\n",
              "      <td>1.076743</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>0.081253</td>\n",
              "      <td>0.135624</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>-0.115099</td>\n",
              "      <td>1.037570</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>-0.101283</td>\n",
              "      <td>0.031425</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>0.932308</td>\n",
              "      <td>0.061168</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>1.024196</td>\n",
              "      <td>-0.191328</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>1.036164</td>\n",
              "      <td>-0.064512</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>-0.046947</td>\n",
              "      <td>0.054256</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>-0.261975</td>\n",
              "      <td>1.082190</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>0.034362</td>\n",
              "      <td>-0.176304</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>-0.052976</td>\n",
              "      <td>0.051327</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>-0.007201</td>\n",
              "      <td>1.100353</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>0.000511</td>\n",
              "      <td>0.976541</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>0.939829</td>\n",
              "      <td>1.185228</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>-0.090802</td>\n",
              "      <td>0.858770</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>-0.001350</td>\n",
              "      <td>-0.105771</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>0.952083</td>\n",
              "      <td>-0.018566</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>-0.003583</td>\n",
              "      <td>0.156464</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>0.032408</td>\n",
              "      <td>0.961492</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>1.006753</td>\n",
              "      <td>0.857525</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>0.049671</td>\n",
              "      <td>-0.013826</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>0.929795</td>\n",
              "      <td>-0.032766</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>1.103100</td>\n",
              "      <td>1.093128</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>0.889367</td>\n",
              "      <td>0.880379</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>1.009176</td>\n",
              "      <td>0.801243</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>0.033126</td>\n",
              "      <td>1.097555</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>34</th>\n",
              "      <td>0.009708</td>\n",
              "      <td>1.096864</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>35</th>\n",
              "      <td>0.064769</td>\n",
              "      <td>1.152303</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>36</th>\n",
              "      <td>-0.011565</td>\n",
              "      <td>0.969890</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>0.976585</td>\n",
              "      <td>-0.023414</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>38</th>\n",
              "      <td>-0.021967</td>\n",
              "      <td>0.035711</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>1.036140</td>\n",
              "      <td>1.153804</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>40</th>\n",
              "      <td>0.953936</td>\n",
              "      <td>1.105712</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>41</th>\n",
              "      <td>0.029612</td>\n",
              "      <td>0.026106</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>42</th>\n",
              "      <td>1.146565</td>\n",
              "      <td>-0.022578</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>43</th>\n",
              "      <td>0.852148</td>\n",
              "      <td>-0.071984</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44</th>\n",
              "      <td>1.020886</td>\n",
              "      <td>-0.195967</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>45</th>\n",
              "      <td>0.965729</td>\n",
              "      <td>0.919772</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46</th>\n",
              "      <td>0.073847</td>\n",
              "      <td>0.017137</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47</th>\n",
              "      <td>0.827508</td>\n",
              "      <td>0.943771</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48</th>\n",
              "      <td>0.919151</td>\n",
              "      <td>-0.050176</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49</th>\n",
              "      <td>0.939936</td>\n",
              "      <td>-0.029169</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-38d1d5e8-2372-4063-bcba-2da35d3766e9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-38d1d5e8-2372-4063-bcba-2da35d3766e9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-38d1d5e8-2372-4063-bcba-2da35d3766e9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-f7f757cf-ec26-431c-99ad-108c493a4268\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f7f757cf-ec26-431c-99ad-108c493a4268')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-f7f757cf-ec26-431c-99ad-108c493a4268 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_1edef0c4-0c55-40e7-8411-689179fd552a\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_train')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_1edef0c4-0c55-40e7-8411-689179fd552a button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df_train');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_train",
              "summary": "{\n  \"name\": \"df_train\",\n  \"rows\": 50,\n  \"fields\": [\n    {\n      \"column\": \"x1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5035752973298507,\n        \"min\": -0.2619745104089744,\n        \"max\": 1.1579212815507391,\n        \"num_unique_values\": 50,\n        \"samples\": [\n          1.0241962271566034,\n          1.0361395605508414,\n          1.103099952249595\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"x2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5243314040478623,\n        \"min\": -0.1959670123879775,\n        \"max\": 1.1852278184508938,\n        \"num_unique_values\": 50,\n        \"samples\": [\n          -0.1913280244657798,\n          1.153803656646597,\n          1.0931280119116198\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"y\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "X_train:\n",
            "[[ 8.67181395e-01  1.01968612e+00]\n",
            " [ 1.47789404e-01  9.48172978e-01]\n",
            " [ 9.60789185e-01  8.53648505e-01]\n",
            " [-5.44382725e-02  1.10922590e-02]\n",
            " [ 1.09154021e+00  1.03287511e+00]\n",
            " [-4.63417693e-02  9.53427025e-01]\n",
            " [ 8.22544912e-02  8.77915635e-01]\n",
            " [ 8.58462926e-01 -4.20645323e-02]\n",
            " [ 1.15792128e+00  1.07674347e+00]\n",
            " [ 8.12525822e-02  1.35624003e-01]\n",
            " [-1.15099358e-01  1.03756980e+00]\n",
            " [-1.01283112e-01  3.14247333e-02]\n",
            " [ 9.32307800e-01  6.11676289e-02]\n",
            " [ 1.02419623e+00 -1.91328024e-01]\n",
            " [ 1.03616360e+00 -6.45119755e-02]\n",
            " [-4.69474386e-02  5.42560044e-02]\n",
            " [-2.61974510e-01  1.08219025e+00]\n",
            " [ 3.43618290e-02 -1.76304016e-01]\n",
            " [-5.29760204e-02  5.13267433e-02]\n",
            " [-7.20101216e-03  1.10035329e+00]\n",
            " [ 5.11345664e-04  9.76541287e-01]\n",
            " [ 9.39829339e-01  1.18522782e+00]\n",
            " [-9.08024076e-02  8.58769630e-01]\n",
            " [-1.34972247e-03 -1.05771093e-01]\n",
            " [ 9.52082576e-01 -1.85658977e-02]\n",
            " [-3.58260391e-03  1.56464366e-01]\n",
            " [ 3.24083969e-02  9.61491772e-01]\n",
            " [ 1.00675282e+00  8.57525181e-01]\n",
            " [ 4.96714153e-02 -1.38264301e-02]\n",
            " [ 9.29794691e-01 -3.27662147e-02]\n",
            " [ 1.10309995e+00  1.09312801e+00]\n",
            " [ 8.89366503e-01  8.80379338e-01]\n",
            " [ 1.00917608e+00  8.01243109e-01]\n",
            " [ 3.31263431e-02  1.09755451e+00]\n",
            " [ 9.70775493e-03  1.09686450e+00]\n",
            " [ 6.47688538e-02  1.15230299e+00]\n",
            " [-1.15648282e-02  9.69889630e-01]\n",
            " [ 9.76584663e-01 -2.34136957e-02]\n",
            " [-2.19671888e-02  3.57112572e-02]\n",
            " [ 1.03613956e+00  1.15380366e+00]\n",
            " [ 9.53936123e-01  1.10571222e+00]\n",
            " [ 2.96120277e-02  2.61055272e-02]\n",
            " [ 1.14656488e+00 -2.25776300e-02]\n",
            " [ 8.52147801e-01 -7.19844208e-02]\n",
            " [ 1.02088636e+00 -1.95967012e-01]\n",
            " [ 9.65728548e-01  9.19772273e-01]\n",
            " [ 7.38466580e-02  1.71368281e-02]\n",
            " [ 8.27508217e-01  9.43771247e-01]\n",
            " [ 9.19150640e-01 -5.01757044e-02]\n",
            " [ 9.39936131e-01 -2.91693750e-02]]\n",
            "\n",
            "y_train:\n",
            "[0 1 0 0 0 1 1 1 0 0 1 0 1 1 1 0 1 0 0 1 1 0 1 0 1 0 1 0 0 1 0 0 0 1 1 1 1\n",
            " 1 0 0 0 0 1 1 1 0 0 0 1 1]\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#### 乱数シードの設定\n",
        "# 深層学習では様々なところに乱数を使います。\n",
        "# 再現性のために、必ず乱数シードを設定しましょう。\n",
        "# 最初にtorch.manual_seed()で乱数シードを指定しておくと、\n",
        "# それ以降の全ての行程で同じ乱数シードが使用されます。\n",
        "# 採点の都合上、今回は以下の値を用いてください。\n",
        "\n",
        "import torch\n",
        "\n",
        "seed = 42 # 変更しない\n",
        "torch.manual_seed(seed)\n",
        "print('Random seed: {}'.format(seed))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BFgUxIZQBBzu",
        "outputId": "12e3006c-ad09-4f97-d3ab-c833ca0fadd3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Random seed: 42\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#### ネットワーク構造の定義\n",
        "# レイヤーや活性化関数を部品のように組み合わせることで、ネットワーク構造を定義します。\n",
        "# torch.nnに様々な種類のレイヤーや活性化関数がクラスとして用意されています。\n",
        "\n",
        "import torch.nn as nn\n",
        "\n",
        "# nn.Linear():\n",
        "# u = W z + b のような線形演算を行うレイヤー\n",
        "# コンストラクタの引数として、入力と出力の個数を指定。\n",
        "# 例えば、nn.Linear(3, 5)なら、入力zは長さ3のベクトル、出力uは長さ5のベクトル。\n",
        "#\n",
        "# nn.Sigmoid():\n",
        "# シグモイド関数\n",
        "# 活性化関数 z = f(u) として用いる。\n",
        "\n",
        "# nn.Sequential()を用いて、レイヤーや活性化関数を順方向計算の順番で指定します。\n",
        "# 例えば、レポート課題で扱ったネットワーク構造は以下のように指定できます。\n",
        "model = nn.Sequential(\n",
        "    nn.Linear(2, 2), # 隠れ層1: u1 = W1 x  + b1 を行う部分\n",
        "    nn.Sigmoid(),    # 隠れ層1: z1 = f(u1) を行う部分\n",
        "    nn.Linear(2, 2), # 隠れ層2: u2 = W2 z1 + b2 を行う部分\n",
        "    nn.Sigmoid(),    # 隠れ層2: z2 = f(u2) を行う部分\n",
        "    nn.Linear(2, 1)  # 出力層:  u3 = W3 z2 + b3 を行う部分\n",
        ")\n",
        "# 作成したインスタンスmodelには、ネットワーク構造が記録されています。\n",
        "# パラメータ(W1, b1, W2, b2, W3, b3に相当)はメンバ変数になっています。\n",
        "# パラメータの初期化はXavier法を用いて自動的に行われます。\n",
        "# ※「深層学習入門」第3回を参照\n",
        "\n",
        "# このネットワークの出力はu (logits)であり、\n",
        "# 出力関数 y_pred = f(u) を計算する部分はネットワークに含まれていません。\n",
        "# これについては後で説明します。"
      ],
      "metadata": {
        "id": "sYZz1ol6F7If"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#### 損失関数の定義\n",
        "# 損失関数についても、様々な種類のものがクラスとして用意されています。\n",
        "\n",
        "# nn.BCEWithLogitsLoss():\n",
        "# 2クラス分類の交差エントロピー誤差(binary cross entropy; BCE)\n",
        "# モデルの予測したu (logits)と真のyを受け取り、\n",
        "# y_pred = f(u)を計算してから真のyとの交差エントロピー誤差を計算\n",
        "# ↑ここに出力関数の計算が含まれています。\n",
        "criterion = nn.BCEWithLogitsLoss()\n",
        "\n",
        "# 補足:\n",
        "# ネットワーク構造に出力関数の計算を含めない理由\n",
        "# 出力関数のシグモイドの計算ではexp()、\n",
        "# 交差エントロピー誤差の計算ではlog()を行うため、\n",
        "# これらをnn.BCEWithLogitsLoss()内で一括して行う方が\n",
        "# 無駄な計算を省けるのと数値的安定性の面でも有利"
      ],
      "metadata": {
        "id": "MsGU5RumNx8w"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#### 確率的勾配降下法(SGD)の定義\n",
        "# torch.optimに様々なSGDの方法がクラスとして用意されています。\n",
        "\n",
        "import torch.optim as optim\n",
        "\n",
        "# optim.SGD():\n",
        "# 最も基本的なSGD\n",
        "# コンストラクタの引数として、\n",
        "# モデルのパラメータmodel.parameters()と学習率lrを指定\n",
        "optimizer = optim.SGD(model.parameters(), lr=0.1)"
      ],
      "metadata": {
        "id": "xj2n8w4KOAPd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#### データの変換、バッチサイズの指定\n",
        "\n",
        "# torch.tensor()を使って、学習データをnumpyアレイからテンソルに変換します。\n",
        "X_train = torch.tensor(X_train_np, dtype=torch.float32) # shape (50, 2)\n",
        "# torchではyを2次元のテンソルとして表すことが多いです。\n",
        "# 2クラス分類の場合、yは1つの値しかないのでshapeを(50, 1)に変換します。\n",
        "# reshape()の引数に-1を指定すると、そのaxisの大きさを自動的に補完してくれます。\n",
        "y_train = torch.tensor(y_train_np, dtype=torch.float32).reshape(-1, 1) # shapeを(50, 1)に変換\n",
        "# 回帰やマルチクラス分類の場合、適宜shapeを調整します。\n",
        "\n",
        "# 学習の際のバッチサイズは以下のように指定します。\n",
        "# 今回はバッチサイズを1とします。\n",
        "from torch.utils.data import TensorDataset, DataLoader\n",
        "\n",
        "train_dataset = TensorDataset(X_train, y_train)\n",
        "train_loader = DataLoader(train_dataset, batch_size=1) # バッチサイズの指定"
      ],
      "metadata": {
        "id": "SrzfERZpwimo"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#### 学習\n",
        "# ネットワーク構造、損失関数、SGD、バッチサイズなど必要な設定が整いました。\n",
        "# この設定で学習を1000エポック回してみます。\n",
        "# 損失関数の値が低下していく様子を確認できます。\n",
        "\n",
        "# 1000エポック回す\n",
        "for epoch in range(1000):\n",
        "    epoch_loss = 0.0\n",
        "    # train_loaderから1バッチずつ取得\n",
        "    for X_batch, y_batch in train_loader:\n",
        "        # 勾配のリセット\n",
        "        optimizer.zero_grad()\n",
        "        # 順方向計算\n",
        "        # X_batchに対するu (logits)を計算\n",
        "        output = model(X_batch)\n",
        "        # 損失関数を計算\n",
        "        loss = criterion(output, y_batch)\n",
        "        # 誤差逆伝播\n",
        "        # 各パラメータに関する勾配を計算\n",
        "        loss.backward()\n",
        "        # 勾配を使ってパラメータを更新\n",
        "        optimizer.step()\n",
        "        # 各バッチの損失を加算\n",
        "        epoch_loss += loss.item() * X_batch.size(0)\n",
        "    # エポック終了、全データの損失の平均を計算\n",
        "    avg_loss = epoch_loss / len(train_loader.dataset)\n",
        "    # 100エポックごとに損失を表示\n",
        "    if epoch % 100 == 0:\n",
        "        print('Epoch {}, Loss: {}'.format(epoch, avg_loss))\n",
        "\n",
        "# 学習後の損失関数の値\n",
        "print('Loss after training: {}'.format(avg_loss))\n",
        "\n",
        "# 補足:\n",
        "# train_loaderは繰り返し可能(イテラブル)の機能を持っています。\n",
        "# ※「プログラミングⅡ」第21,22回参照\n",
        "# forの繰り返しの度に、バッチが順番にX_batch, y_batchに代入され、\n",
        "# 全データを1巡するとforが終了します。"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P3eMG6X4ccPK",
        "outputId": "2bd80450-5415-462f-826d-63a701d14e28"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 0, Loss: 0.7322194826602936\n",
            "Epoch 100, Loss: 0.7080681312084198\n",
            "Epoch 200, Loss: 0.7066354048252106\n",
            "Epoch 300, Loss: 0.7060967826843262\n",
            "Epoch 400, Loss: 0.7052647113800049\n",
            "Epoch 500, Loss: 0.5773225277662277\n",
            "Epoch 600, Loss: 0.4811536180600524\n",
            "Epoch 700, Loss: 0.020355642307549715\n",
            "Epoch 800, Loss: 0.00967745834030211\n",
            "Epoch 900, Loss: 0.006333600739017129\n",
            "Loss after training: 0.00471525318454951\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#### まとめ\n",
        "# ここまでの流れを1つのセルにまとめると以下のようになります。\n",
        "\n",
        "# 必要なモジュール一式を準備\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "from torch.utils.data import TensorDataset, DataLoader\n",
        "\n",
        "# 乱数シードの設定\n",
        "seed = 42 # 変更しない\n",
        "torch.manual_seed(seed)\n",
        "print('Random seed: {}'.format(seed))\n",
        "\n",
        "# ネットワーク構造の定義\n",
        "model = nn.Sequential(\n",
        "    nn.Linear(2, 2),\n",
        "    nn.Sigmoid(),\n",
        "    nn.Linear(2, 2),\n",
        "    nn.Sigmoid(),\n",
        "    nn.Linear(2, 1)\n",
        ")\n",
        "\n",
        "# 損失関数の定義\n",
        "criterion = nn.BCEWithLogitsLoss()\n",
        "\n",
        "# SGDの定義\n",
        "optimizer = optim.SGD(model.parameters(), lr=0.1)\n",
        "\n",
        "# テンソルへの変換\n",
        "X_train = torch.tensor(X_train_np, dtype=torch.float32)\n",
        "y_train = torch.tensor(y_train_np, dtype=torch.float32).reshape(-1, 1) # shape (50, 1)\n",
        "\n",
        "# バッチサイズの指定\n",
        "train_dataset = TensorDataset(X_train, y_train)\n",
        "train_loader = DataLoader(train_dataset, batch_size=1)\n",
        "\n",
        "# 1000エポック回す\n",
        "for epoch in range(1000):\n",
        "    epoch_loss = 0.0\n",
        "    # train_loaderから1バッチずつ取得\n",
        "    for X_batch, y_batch in train_loader:\n",
        "        # 勾配のリセット\n",
        "        optimizer.zero_grad()\n",
        "        # 順方向計算\n",
        "        # X_batchに対するu (logits)を計算\n",
        "        output = model(X_batch)\n",
        "        # 損失関数を計算\n",
        "        loss = criterion(output, y_batch)\n",
        "        # 誤差逆伝播\n",
        "        # 各パラメータに関する勾配を計算\n",
        "        loss.backward()\n",
        "        # 勾配を使ってパラメータを更新\n",
        "        optimizer.step()\n",
        "        # 各バッチの損失を加算\n",
        "        epoch_loss += loss.item() * X_batch.size(0)\n",
        "    # エポック終了、全データの損失の平均を計算\n",
        "    avg_loss = epoch_loss / len(train_loader.dataset)\n",
        "    # 100エポックごとに損失を表示\n",
        "    if epoch % 100 == 0:\n",
        "        print('Epoch {}, Loss: {}'.format(epoch, avg_loss))\n",
        "\n",
        "# 学習後の損失関数の値\n",
        "print('Loss after training: {}'.format(avg_loss))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cO3eviQpjuYK",
        "outputId": "95e6890c-c532-4d7d-8f91-4cbf7b7cdb43"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Random seed: 42\n",
            "Epoch 0, Loss: 0.7322194826602936\n",
            "Epoch 100, Loss: 0.7080681312084198\n",
            "Epoch 200, Loss: 0.7066354048252106\n",
            "Epoch 300, Loss: 0.7060967826843262\n",
            "Epoch 400, Loss: 0.7052647113800049\n",
            "Epoch 500, Loss: 0.5773225277662277\n",
            "Epoch 600, Loss: 0.4811536180600524\n",
            "Epoch 700, Loss: 0.020355642307549715\n",
            "Epoch 800, Loss: 0.00967745834030211\n",
            "Epoch 900, Loss: 0.006333600739017129\n",
            "Loss after training: 0.00471525318454951\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "【課題】上の例にならって、講義資料の多層パーセプトロンを実装して、学習後の損失関数の値を表示してください。学習率は0.3とします。それ以外の設定は、上の例と同じにしてください。"
      ],
      "metadata": {
        "id": "mwQ6fsHfv-ME"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 必要なモジュール一式を準備\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "from torch.utils.data import TensorDataset, DataLoader\n",
        "\n",
        "# 乱数シードの設定\n",
        "seed = 42 # 変更しない\n",
        "torch.manual_seed(seed)\n",
        "print('Random seed: {}'.format(seed))\n",
        "\n",
        "# ネットワーク構造の定義\n",
        "# 上の例から隠れ層を1つ減らす\n",
        "model = nn.Sequential(\n",
        "    nn.Linear(2, 2),\n",
        "    nn.Sigmoid(),\n",
        "    nn.Linear(2, 1),\n",
        ")\n",
        "\n",
        "# 損失関数の定義\n",
        "criterion = nn.BCEWithLogitsLoss()\n",
        "\n",
        "# SGDの定義\n",
        "# 学習率を0.3にする\n",
        "optimizer = optim.SGD(model.parameters(), lr=0.3)\n",
        "\n",
        "# テンソルへの変換\n",
        "X_train = torch.tensor(X_train_np, dtype=torch.float32)\n",
        "y_train = torch.tensor(y_train_np, dtype=torch.float32).reshape(-1, 1) # shape (50, 1)\n",
        "\n",
        "# バッチサイズの指定\n",
        "train_dataset = TensorDataset(X_train, y_train)\n",
        "train_loader = DataLoader(train_dataset, batch_size=1)\n",
        "\n",
        "# 1000エポック回す\n",
        "for epoch in range(1000):\n",
        "    epoch_loss = 0.0\n",
        "    # train_loaderから1バッチずつ取得\n",
        "    for X_batch, y_batch in train_loader:\n",
        "        # 勾配のリセット\n",
        "        optimizer.zero_grad()\n",
        "        # 順方向計算\n",
        "        # X_batchに対するu (logits)を計算\n",
        "        output = model(X_batch)\n",
        "        # 損失関数を計算\n",
        "        loss = criterion(output, y_batch)\n",
        "        # 誤差逆伝播\n",
        "        # 各パラメータに関する勾配を計算\n",
        "        loss.backward()\n",
        "        # 勾配を使ってパラメータを更新\n",
        "        optimizer.step()\n",
        "        # 各バッチの損失を加算\n",
        "        epoch_loss += loss.item() * X_batch.size(0)\n",
        "    # エポック終了、全データの損失の平均を計算\n",
        "    avg_loss = epoch_loss / len(train_loader.dataset)\n",
        "    # 100エポックごとに損失を表示\n",
        "    if epoch % 100 == 0:\n",
        "        print('Epoch {}, Loss: {}'.format(epoch, avg_loss))\n",
        "\n",
        "# 学習後の損失関数の値\n",
        "print('Loss after training: {}'.format(avg_loss))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Po-nkiOywFMf",
        "outputId": "6a21519f-1465-4293-e7c4-75ee8dd62a6b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Random seed: 42\n",
            "Epoch 0, Loss: 0.7616229379177093\n",
            "Epoch 100, Loss: 0.3645225475076586\n",
            "Epoch 200, Loss: 0.012828547290991992\n",
            "Epoch 300, Loss: 0.003950397968292236\n",
            "Epoch 400, Loss: 0.002391571747139096\n",
            "Epoch 500, Loss: 0.0017190073884557932\n",
            "Epoch 600, Loss: 0.001342477862490341\n",
            "Epoch 700, Loss: 0.001101487132254988\n",
            "Epoch 800, Loss: 0.000933889492880553\n",
            "Epoch 900, Loss: 0.0008105313283158466\n",
            "Loss after training: 0.0007168490468757227\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "【課題】上の課題の多層パーセプトロンについて、隠れ層のユニット数を20に変更して、学習後の損失関数の値を表示してください。学習率は0.3とします。それ以外の設定は、上の課題と同じにしてください。"
      ],
      "metadata": {
        "id": "0iSPfLv9LYDj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 乱数シードの設定\n",
        "seed = 42 # 変更しない\n",
        "torch.manual_seed(seed)\n",
        "print('Random seed: {}'.format(seed))\n",
        "\n",
        "# ネットワーク構造の定義\n",
        "# 隠れ層のユニット数を20に変更\n",
        "model = nn.Sequential(\n",
        "    nn.Linear(2, 20),\n",
        "    nn.Sigmoid(),\n",
        "    nn.Linear(20, 1),\n",
        ")\n",
        "\n",
        "# SGDの定義\n",
        "# 学習率を0.3にする\n",
        "optimizer = optim.SGD(model.parameters(), lr=0.3)\n",
        "\n",
        "# 1000エポック回す\n",
        "for epoch in range(1000):\n",
        "    epoch_loss = 0.0\n",
        "    # train_loaderから1バッチずつ取得\n",
        "    for X_batch, y_batch in train_loader:\n",
        "        # 勾配のリセット\n",
        "        optimizer.zero_grad()\n",
        "        # 順方向計算\n",
        "        # X_batchに対するu (logits)を計算\n",
        "        output = model(X_batch)\n",
        "        # 損失関数を計算\n",
        "        loss = criterion(output, y_batch)\n",
        "        # 誤差逆伝播\n",
        "        # 各パラメータに関する勾配を計算\n",
        "        loss.backward()\n",
        "        # 勾配を使ってパラメータを更新\n",
        "        optimizer.step()\n",
        "        # 各バッチの損失を加算\n",
        "        epoch_loss += loss.item() * X_batch.size(0)\n",
        "    # エポック終了、全データの損失の平均を計算\n",
        "    avg_loss = epoch_loss / len(train_loader.dataset)\n",
        "    # 100エポックごとに損失を表示\n",
        "    if epoch % 100 == 0:\n",
        "        print('Epoch {}, Loss: {}'.format(epoch, avg_loss))\n",
        "\n",
        "# 学習後の損失関数の値\n",
        "print('Loss after training: {}'.format(avg_loss))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YewqgjGGLXPX",
        "outputId": "f47013b8-1f27-4ab1-dd50-6aa83490977b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Random seed: 42\n",
            "Epoch 0, Loss: 0.9191698470711708\n",
            "Epoch 100, Loss: 0.006791297695599496\n",
            "Epoch 200, Loss: 0.0025015374354552477\n",
            "Epoch 300, Loss: 0.0014819040725706145\n",
            "Epoch 400, Loss: 0.0010381181014236063\n",
            "Epoch 500, Loss: 0.0007930361066246405\n",
            "Epoch 600, Loss: 0.0006387292945873923\n",
            "Epoch 700, Loss: 0.0005330481438431889\n",
            "Epoch 800, Loss: 0.0004564022467820905\n",
            "Epoch 900, Loss: 0.00039830992551287636\n",
            "Loss after training: 0.00035337064546183685\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#### 自動微分との関係\n",
        "# pytorchでは、誤差逆伝播は自動微分を用いて実装されています。\n",
        "# torch.nnの様々なレイヤー、活性化関数、損失関数は\n",
        "# どれも自動微分に対応したクラスとして実装されており、\n",
        "# 勾配の値をメンバ変数として保持できるようになっています。\n",
        "# 計算を行うと、内部で計算グラフやbackward関数が自動的に作成されます。\n",
        "\n",
        "# 以下、コードの各部分と自動微分との関係を説明します。\n",
        "\n",
        "# nn.Linear(), nn.Sigmoid()は自動微分に対応したクラス\n",
        "# ネットワーク構造の定義は、計算グラフの定義に相当\n",
        "model = nn.Sequential(\n",
        "    nn.Linear(2, 2),\n",
        "    nn.Sigmoid(),\n",
        "    nn.Linear(2, 2),\n",
        "    nn.Sigmoid(),\n",
        "    nn.Linear(2, 1)\n",
        ")\n",
        "\n",
        "# 損失関数も自動微分に対応したクラス\n",
        "criterion = nn.BCEWithLogitsLoss()\n",
        "\n",
        "# model.parameters()はパラメータの値だけでなく、その勾配の値も保持\n",
        "# そのためoptimizerは勾配の値にアクセスできる\n",
        "optimizer = optim.SGD(model.parameters(), lr=0.1)\n",
        "\n",
        "# 学習ループ\n",
        "for epoch in range(1000):\n",
        "    epoch_loss = 0.0\n",
        "    for X_batch, y_batch in train_loader:\n",
        "        # optimizerから勾配の値をリセット\n",
        "        optimizer.zero_grad()\n",
        "        # ここで計算グラフが自動的に作られる\n",
        "        output = model(X_batch)\n",
        "        # ここでlossが計算グラフに組み込まれる\n",
        "        loss = criterion(output, y_batch)\n",
        "        # lossからbackward()して自動微分\n",
        "        # 全パラメータの勾配の値が計算される\n",
        "        loss.backward()\n",
        "        # optimizerから勾配の値を使ってパラメータを更新\n",
        "        optimizer.step()\n",
        "        # 以降は自動微分とは関係ない\n",
        "        epoch_loss += loss.item() * X_batch.size(0)\n",
        "    avg_loss = epoch_loss / len(train_loader.dataset)\n",
        "    if epoch % 100 == 0:\n",
        "        print('Epoch {}, Loss: {}'.format(epoch, avg_loss))"
      ],
      "metadata": {
        "id": "k5RN0S76niBg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#### 学習後の精度評価\n",
        "# 学習したモデルの精度をテストデータに対して評価します。\n",
        "\n",
        "# テストデータの準備\n",
        "url='https://drive.google.com/uc?export=download&id=1VSS6Juhj6NJrDhW7aOic8oz8v4yAGP0v'\n",
        "gdown.download(url, 'kadai1_data_test.csv', quiet=False)\n",
        "print('\\n')\n",
        "df_test = pd.read_csv('kadai1_data_test.csv')\n",
        "X_test_df = df_test.iloc[:, :-1]\n",
        "y_test_df = df_test.iloc[:, -1]\n",
        "X_test_np = X_test_df.to_numpy()\n",
        "y_test_np = y_test_df.to_numpy()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yASDDJNM1oqV",
        "outputId": "848ba4c7-b248-45ad-d7f4-24c7ec2e143b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Downloading...\n",
            "From: https://drive.google.com/uc?export=download&id=1VSS6Juhj6NJrDhW7aOic8oz8v4yAGP0v\n",
            "To: /content/kadai1_data_test.csv\n",
            "100%|██████████| 834/834 [00:00<00:00, 1.54MB/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# まず、先程と同様に学習を行います。\n",
        "\n",
        "# 乱数シードの設定\n",
        "seed = 42 # 変更しない\n",
        "torch.manual_seed(seed)\n",
        "print('Random seed: {}'.format(seed))\n",
        "\n",
        "# ネットワーク構造の定義\n",
        "model = nn.Sequential(\n",
        "    nn.Linear(2, 2),\n",
        "    nn.Sigmoid(),\n",
        "    nn.Linear(2, 2),\n",
        "    nn.Sigmoid(),\n",
        "    nn.Linear(2, 1)\n",
        ")\n",
        "\n",
        "# 損失関数の定義\n",
        "criterion = nn.BCEWithLogitsLoss()\n",
        "\n",
        "# SGDの定義\n",
        "optimizer = optim.SGD(model.parameters(), lr=0.1)\n",
        "\n",
        "# テンソルへの変換\n",
        "X_train = torch.tensor(X_train_np, dtype=torch.float32)\n",
        "y_train = torch.tensor(y_train_np, dtype=torch.float32).reshape(-1, 1)\n",
        "\n",
        "# バッチサイズの指定\n",
        "train_dataset = TensorDataset(X_train, y_train)\n",
        "train_loader = DataLoader(train_dataset, batch_size=1)\n",
        "\n",
        "# 1000エポック回す\n",
        "for epoch in range(1000):\n",
        "    epoch_loss = 0.0\n",
        "    # train_loaderから1バッチずつ取得\n",
        "    for X_batch, y_batch in train_loader:\n",
        "        # 勾配のリセット\n",
        "        optimizer.zero_grad()\n",
        "        # 順方向計算\n",
        "        # X_batchに対するu (logits)を計算\n",
        "        output = model(X_batch)\n",
        "        # 損失関数を計算\n",
        "        loss = criterion(output, y_batch)\n",
        "        # 誤差逆伝播\n",
        "        # 各パラメータに関する勾配を計算\n",
        "        loss.backward()\n",
        "        # 勾配を使ってパラメータを更新\n",
        "        optimizer.step()\n",
        "        # 各バッチの損失を加算\n",
        "        epoch_loss += loss.item() * X_batch.size(0)\n",
        "    # エポック終了、全データの損失の平均を計算\n",
        "    avg_loss = epoch_loss / len(train_loader.dataset)\n",
        "    # 100エポックごとに損失を表示\n",
        "    if epoch % 100 == 0:\n",
        "        print('Epoch {}, Loss: {}'.format(epoch, avg_loss))\n",
        "\n",
        "# 学習後の損失関数の値\n",
        "print('Loss after training: {}'.format(avg_loss))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xXNGGaf-7Zia",
        "outputId": "57a74558-3797-452c-869a-65c05d17d76f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Random seed: 42\n",
            "Epoch 0, Loss: 0.7322194826602936\n",
            "Epoch 100, Loss: 0.7080681312084198\n",
            "Epoch 200, Loss: 0.7066354048252106\n",
            "Epoch 300, Loss: 0.7060967826843262\n",
            "Epoch 400, Loss: 0.7052647113800049\n",
            "Epoch 500, Loss: 0.5773225277662277\n",
            "Epoch 600, Loss: 0.4811536180600524\n",
            "Epoch 700, Loss: 0.020355642307549715\n",
            "Epoch 800, Loss: 0.00967745834030211\n",
            "Epoch 900, Loss: 0.006333600739017129\n",
            "Loss after training: 0.00471525318454951\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# テストデータをテンソルに変換して、学習後のモデルで予測値を計算します。\n",
        "# その後、sklearnの関数を使ってROC AUCを評価します。\n",
        "# sklearnの関数に渡す際には、テンソルをnumpyアレイに変換しておくと安全です。\n",
        "from sklearn.metrics import roc_auc_score\n",
        "\n",
        "# テストデータをテンソルに変換\n",
        "X_test = torch.tensor(X_test_np, dtype=torch.float32)\n",
        "y_test = torch.tensor(y_test_np, dtype=torch.float32).reshape(-1, 1)\n",
        "\n",
        "# テストデータに対する精度評価\n",
        "with torch.no_grad():\n",
        "    # X_testに対する予測値を計算\n",
        "    # model()でlogitsを計算して、シグモイド関数でクラス確率に変換\n",
        "    y_test_prob = torch.sigmoid(model(X_test)) # shape (N, 1)\n",
        "    # sklearnで使う用にテンソルをnumpyアレイに変換\n",
        "    # squeeze(1)で2次元から1次元に落とす\n",
        "    y_test_prob_np = y_test_prob.squeeze(1).numpy() # shape (N, )\n",
        "\n",
        "# ROC AUCの評価\n",
        "print('y_test_prob:\\n{}'.format(y_test_prob_np))\n",
        "auc_test = roc_auc_score(y_true=y_test_np, y_score=y_test_prob_np)\n",
        "print('ROC AUC on test data: {}'.format(auc_test))\n",
        "\n",
        "# with torch.no_grad():\n",
        "# 自動微分をOFFにする機能\n",
        "# 自動微分は計算グラフの構築など重い計算を含むため、\n",
        "# 勾配の計算が必要ないときには、自動微分をOFFにした方が計算が軽くなります。\n",
        "# 学習後の精度評価では勾配は必要ないので、自動微分をOFFにしてOKです。"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tcZLd2QP6Xn5",
        "outputId": "85313c48-95b1-4e19-c053-8a775162601e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "y_test_prob:\n",
            "[0.995893   0.9964619  0.00629363 0.9954052  0.0048587  0.00470297\n",
            " 0.00500095 0.00517363 0.00757995 0.00615943 0.00556101 0.99585056\n",
            " 0.00582345 0.9953296  0.00582337 0.994358   0.99605525 0.99539906\n",
            " 0.9930922  0.9923361 ]\n",
            "ROC AUC on test data: 1.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 精度指標にaccuracyを使用する例です。\n",
        "from sklearn.metrics import accuracy_score\n",
        "\n",
        "# クラス確率を閾値0.5で切って、予測クラス1, 0にする\n",
        "y_test_pred_np = (y_test_prob_np > 0.5).astype(int)\n",
        "print('y_test_pred:\\n{}'.format(y_test_pred_np))\n",
        "# accuracyの評価\n",
        "accuracy_test = accuracy_score(y_true=y_test_np, y_pred=y_test_pred_np)\n",
        "print('Accuracy on test data: {}'.format(accuracy_test))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_Phi-JuNS8lE",
        "outputId": "810c21ea-1054-421e-9951-43a5d3d7bdb4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "y_test_pred:\n",
            "[1 1 0 1 0 0 0 0 0 0 0 1 0 1 0 1 1 1 1 1]\n",
            "Accuracy on test data: 1.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#### 活性化関数の設定\n",
        "# 先程のネットワークから活性化関数を変更する例です。\n",
        "# 隠れ層2の活性化関数をReLUに変更してみます。\n",
        "\n",
        "# 乱数シードの設定\n",
        "seed = 42 # 変更しない\n",
        "torch.manual_seed(seed)\n",
        "print('Random seed: {}'.format(seed))\n",
        "\n",
        "# ネットワーク構造の定義\n",
        "# 隠れ層2の活性化関数をReLUに変更\n",
        "model = nn.Sequential(\n",
        "    nn.Linear(2, 2),\n",
        "    nn.Sigmoid(),\n",
        "    nn.Linear(2, 2),\n",
        "    nn.ReLU(), # ここが変わった\n",
        "    nn.Linear(2, 1)\n",
        ")\n",
        "\n",
        "# 後は同様\n",
        "optimizer = optim.SGD(model.parameters(), lr=0.1)\n",
        "\n",
        "for epoch in range(1000):\n",
        "    epoch_loss = 0.0\n",
        "    for X_batch, y_batch in train_loader:\n",
        "        optimizer.zero_grad()\n",
        "        output = model(X_batch)\n",
        "        loss = criterion(output, y_batch)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "        epoch_loss += loss.item() * X_batch.size(0)\n",
        "    avg_loss = epoch_loss / len(train_loader.dataset)\n",
        "    if epoch % 100 == 0:\n",
        "        print('Epoch {}, Loss: {}'.format(epoch, avg_loss))\n",
        "\n",
        "print('Loss after training: {}'.format(avg_loss))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wczjwHP_VHVU",
        "outputId": "e5c5d75c-1078-4787-c95d-d1bece5209ae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Random seed: 42\n",
            "Epoch 0, Loss: 0.7274218994379044\n",
            "Epoch 100, Loss: 0.008670198185136542\n",
            "Epoch 200, Loss: 0.0025990388596255796\n",
            "Epoch 300, Loss: 0.001487944164837245\n",
            "Epoch 400, Loss: 0.0010332089682196966\n",
            "Epoch 500, Loss: 0.0007884588226806954\n",
            "Epoch 600, Loss: 0.0006355402612825856\n",
            "Epoch 700, Loss: 0.0005311524133685452\n",
            "Epoch 800, Loss: 0.00045574375000796864\n",
            "Epoch 900, Loss: 0.0003986595052811026\n",
            "Loss after training: 0.00035444140597974184\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "【課題】上の例にならって、隠れ層1の活性化関数をTanh、隠れ層2の活性化関数をReLUにしたネットワークを作成して、学習後の損失関数の値を表示してください。それ以外の設定は上の例と同じにしてください。"
      ],
      "metadata": {
        "id": "f9ohdsaXXEZm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 乱数シードの設定\n",
        "seed = 42 # 変更しない\n",
        "torch.manual_seed(seed)\n",
        "print('Random seed: {}'.format(seed))\n",
        "\n",
        "# ネットワーク構造の定義\n",
        "# 隠れ層1の活性化関数をTanh、隠れ層2の活性化関数をReLUに\n",
        "model = nn.Sequential(\n",
        "    nn.Linear(2, 2),\n",
        "    nn.Tanh(),\n",
        "    nn.Linear(2, 2),\n",
        "    nn.ReLU(),\n",
        "    nn.Linear(2, 1)\n",
        ")\n",
        "\n",
        "# 後は同様\n",
        "optimizer = optim.SGD(model.parameters(), lr=0.1)\n",
        "\n",
        "for epoch in range(1000):\n",
        "    epoch_loss = 0.0\n",
        "    for X_batch, y_batch in train_loader:\n",
        "        optimizer.zero_grad()\n",
        "        output = model(X_batch)\n",
        "        loss = criterion(output, y_batch)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "        epoch_loss += loss.item() * X_batch.size(0)\n",
        "    avg_loss = epoch_loss / len(train_loader.dataset)\n",
        "    if epoch % 100 == 0:\n",
        "        print('Epoch {}, Loss: {}'.format(epoch, avg_loss))\n",
        "\n",
        "print('Loss after training: {}'.format(avg_loss))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1Bio9vypXdYN",
        "outputId": "e80ea2c3-2960-4233-f300-70773eed8a30"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Random seed: 42\n",
            "Epoch 0, Loss: 0.7299161678552628\n",
            "Epoch 100, Loss: 0.003191353383590467\n",
            "Epoch 200, Loss: 0.0013918846553133335\n",
            "Epoch 300, Loss: 0.0008838529813510832\n",
            "Epoch 400, Loss: 0.0006459045150768361\n",
            "Epoch 500, Loss: 0.0005087139663373819\n",
            "Epoch 600, Loss: 0.00041902050275894\n",
            "Epoch 700, Loss: 0.00035598894330178153\n",
            "Epoch 800, Loss: 0.00030936887467760245\n",
            "Epoch 900, Loss: 0.0002733912508301728\n",
            "Loss after training: 0.0002451410238063545\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#### SGDの設定\n",
        "# optim.SGD()では、モメンタムやweight dacayをオプションとして設定できます。\n",
        "# ※「深層学習入門」第2回参照\n",
        "# これらはSGDの収束を速めたり過学習を防ぐのに使用しますが、\n",
        "# 今回はネットワークが小さくパラメータ数も少ないため、\n",
        "# あまり顕著な効果はありません。\n",
        "\n",
        "# 乱数シードの設定\n",
        "seed = 42 # 変更しない\n",
        "torch.manual_seed(seed)\n",
        "print('Random seed: {}'.format(seed))\n",
        "\n",
        "# ネットワーク構造の定義\n",
        "model = nn.Sequential(\n",
        "    nn.Linear(2, 2),\n",
        "    nn.Sigmoid(),\n",
        "    nn.Linear(2, 2),\n",
        "    nn.ReLU(),\n",
        "    nn.Linear(2, 1)\n",
        ")\n",
        "\n",
        "# SGDの定義\n",
        "# モメンタムの強さを決める係数を0.5に設定\n",
        "# weight decayのL2正則化係数を1e-4に設定\n",
        "optimizer = optim.SGD(model.parameters(), lr=0.1, momentum=0.5, weight_decay=1e-4)\n",
        "\n",
        "# 後は同様\n",
        "for epoch in range(1000):\n",
        "    epoch_loss = 0.0\n",
        "    for X_batch, y_batch in train_loader:\n",
        "        optimizer.zero_grad()\n",
        "        output = model(X_batch)\n",
        "        loss = criterion(output, y_batch)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "        epoch_loss += loss.item() * X_batch.size(0)\n",
        "    avg_loss = epoch_loss / len(train_loader.dataset)\n",
        "    if epoch % 100 == 0:\n",
        "        print('Epoch {}, Loss: {}'.format(epoch, avg_loss))\n",
        "\n",
        "print('Loss after training: {}'.format(avg_loss))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tUhj28QcZEcX",
        "outputId": "a482cb60-f1b8-46e0-e439-725e0165ed70"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Random seed: 42\n",
            "Epoch 0, Loss: 0.7322340661287308\n",
            "Epoch 100, Loss: 0.003528436404885724\n",
            "Epoch 200, Loss: 0.0020718745923659298\n",
            "Epoch 300, Loss: 0.00179380916946684\n",
            "Epoch 400, Loss: 0.0017067599947040435\n",
            "Epoch 500, Loss: 0.00167289589822758\n",
            "Epoch 600, Loss: 0.0016572200563678052\n",
            "Epoch 700, Loss: 0.0016488495759404032\n",
            "Epoch 800, Loss: 0.0016437739105458603\n",
            "Epoch 900, Loss: 0.0016403011541842715\n",
            "Loss after training: 0.001637660695996601\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "【課題】上の例にならって、モメンタムの係数を0.6、weight decayの係数を1e-5に設定して、学習後の損失関数の値を表示してください。それ以外の設定は上の例と同じにしてください。"
      ],
      "metadata": {
        "id": "b4FPkeNDg_As"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 乱数シードの設定\n",
        "seed = 42 # 変更しない\n",
        "torch.manual_seed(seed)\n",
        "print('Random seed: {}'.format(seed))\n",
        "\n",
        "# ネットワーク構造の定義\n",
        "model = nn.Sequential(\n",
        "    nn.Linear(2, 2),\n",
        "    nn.Sigmoid(),\n",
        "    nn.Linear(2, 2),\n",
        "    nn.ReLU(),\n",
        "    nn.Linear(2, 1)\n",
        ")\n",
        "\n",
        "# SGDの定義\n",
        "# モメンタムの係数を0.6に設定\n",
        "# weight decayの係数を1e-5に設定\n",
        "optimizer = optim.SGD(model.parameters(), lr=0.1, momentum=0.6, weight_decay=1e-5)\n",
        "\n",
        "# 後は同様\n",
        "for epoch in range(1000):\n",
        "    epoch_loss = 0.0\n",
        "    for X_batch, y_batch in train_loader:\n",
        "        optimizer.zero_grad()\n",
        "        output = model(X_batch)\n",
        "        loss = criterion(output, y_batch)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "        epoch_loss += loss.item() * X_batch.size(0)\n",
        "    avg_loss = epoch_loss / len(train_loader.dataset)\n",
        "    if epoch % 100 == 0:\n",
        "        print('Epoch {}, Loss: {}'.format(epoch, avg_loss))\n",
        "\n",
        "print('Loss after training: {}'.format(avg_loss))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OCJxIqROhYkV",
        "outputId": "180f8e2e-fa37-4946-b2c0-63980a9a08a7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Random seed: 42\n",
            "Epoch 0, Loss: 0.7338427537679673\n",
            "Epoch 100, Loss: 0.0026970300573157147\n",
            "Epoch 200, Loss: 0.0010668516336590982\n",
            "Epoch 300, Loss: 0.0006862889173498843\n",
            "Epoch 400, Loss: 0.0005212202161783353\n",
            "Epoch 500, Loss: 0.00043060574804258065\n",
            "Epoch 600, Loss: 0.00037416730701806956\n",
            "Epoch 700, Loss: 0.00033624824784055817\n",
            "Epoch 800, Loss: 0.00030931620764022225\n",
            "Epoch 900, Loss: 0.0002894299340550788\n",
            "Loss after training: 0.0002745045592018869\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#### 心不全患者の2クラス分類\n",
        "# より現実的な例として、心不全患者のデータを使って、\n",
        "# pytorchによる2値分類モデルを作成します。\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import gdown\n",
        "url='https://drive.google.com/uc?export=download&id=170BvFfMQJBI8jueqdMXuJiB910bbKSiN'\n",
        "gdown.download(url, 'heart_failure_clinical_records.csv', quiet=False)\n",
        "print('\\n')\n",
        "df = pd.read_csv('heart_failure_clinical_records.csv')\n",
        "display(df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 551
        },
        "id": "LQj0xIRukSsn",
        "outputId": "bda19ebc-1b42-4a51-fd82-62c203c9396c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Downloading...\n",
            "From: https://drive.google.com/uc?export=download&id=170BvFfMQJBI8jueqdMXuJiB910bbKSiN\n",
            "To: /content/heart_failure_clinical_records.csv\n",
            "100%|██████████| 11.5k/11.5k [00:00<00:00, 5.97MB/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "      age  anaemia  creatinine_phosphokinase  diabetes  ejection_fraction  \\\n",
              "0    75.0        0                       582         0                 20   \n",
              "1    55.0        0                      7861         0                 38   \n",
              "2    65.0        0                       146         0                 20   \n",
              "3    50.0        1                       111         0                 20   \n",
              "4    65.0        1                       160         1                 20   \n",
              "..    ...      ...                       ...       ...                ...   \n",
              "294  62.0        0                        61         1                 38   \n",
              "295  55.0        0                      1820         0                 38   \n",
              "296  45.0        0                      2060         1                 60   \n",
              "297  45.0        0                      2413         0                 38   \n",
              "298  50.0        0                       196         0                 45   \n",
              "\n",
              "     high_blood_pressure  platelets  serum_creatinine  serum_sodium  sex  \\\n",
              "0                      1  265000.00               1.9           130    1   \n",
              "1                      0  263358.03               1.1           136    1   \n",
              "2                      0  162000.00               1.3           129    1   \n",
              "3                      0  210000.00               1.9           137    1   \n",
              "4                      0  327000.00               2.7           116    0   \n",
              "..                   ...        ...               ...           ...  ...   \n",
              "294                    1  155000.00               1.1           143    1   \n",
              "295                    0  270000.00               1.2           139    0   \n",
              "296                    0  742000.00               0.8           138    0   \n",
              "297                    0  140000.00               1.4           140    1   \n",
              "298                    0  395000.00               1.6           136    1   \n",
              "\n",
              "     smoking  DEATH_EVENT  \n",
              "0          0            1  \n",
              "1          0            1  \n",
              "2          1            1  \n",
              "3          0            1  \n",
              "4          0            1  \n",
              "..       ...          ...  \n",
              "294        1            0  \n",
              "295        0            0  \n",
              "296        0            0  \n",
              "297        1            0  \n",
              "298        1            0  \n",
              "\n",
              "[299 rows x 12 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-93f1aa89-1770-4909-bd1e-14c6f3d45e9e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>anaemia</th>\n",
              "      <th>creatinine_phosphokinase</th>\n",
              "      <th>diabetes</th>\n",
              "      <th>ejection_fraction</th>\n",
              "      <th>high_blood_pressure</th>\n",
              "      <th>platelets</th>\n",
              "      <th>serum_creatinine</th>\n",
              "      <th>serum_sodium</th>\n",
              "      <th>sex</th>\n",
              "      <th>smoking</th>\n",
              "      <th>DEATH_EVENT</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>75.0</td>\n",
              "      <td>0</td>\n",
              "      <td>582</td>\n",
              "      <td>0</td>\n",
              "      <td>20</td>\n",
              "      <td>1</td>\n",
              "      <td>265000.00</td>\n",
              "      <td>1.9</td>\n",
              "      <td>130</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>55.0</td>\n",
              "      <td>0</td>\n",
              "      <td>7861</td>\n",
              "      <td>0</td>\n",
              "      <td>38</td>\n",
              "      <td>0</td>\n",
              "      <td>263358.03</td>\n",
              "      <td>1.1</td>\n",
              "      <td>136</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>65.0</td>\n",
              "      <td>0</td>\n",
              "      <td>146</td>\n",
              "      <td>0</td>\n",
              "      <td>20</td>\n",
              "      <td>0</td>\n",
              "      <td>162000.00</td>\n",
              "      <td>1.3</td>\n",
              "      <td>129</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>50.0</td>\n",
              "      <td>1</td>\n",
              "      <td>111</td>\n",
              "      <td>0</td>\n",
              "      <td>20</td>\n",
              "      <td>0</td>\n",
              "      <td>210000.00</td>\n",
              "      <td>1.9</td>\n",
              "      <td>137</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>65.0</td>\n",
              "      <td>1</td>\n",
              "      <td>160</td>\n",
              "      <td>1</td>\n",
              "      <td>20</td>\n",
              "      <td>0</td>\n",
              "      <td>327000.00</td>\n",
              "      <td>2.7</td>\n",
              "      <td>116</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>294</th>\n",
              "      <td>62.0</td>\n",
              "      <td>0</td>\n",
              "      <td>61</td>\n",
              "      <td>1</td>\n",
              "      <td>38</td>\n",
              "      <td>1</td>\n",
              "      <td>155000.00</td>\n",
              "      <td>1.1</td>\n",
              "      <td>143</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>295</th>\n",
              "      <td>55.0</td>\n",
              "      <td>0</td>\n",
              "      <td>1820</td>\n",
              "      <td>0</td>\n",
              "      <td>38</td>\n",
              "      <td>0</td>\n",
              "      <td>270000.00</td>\n",
              "      <td>1.2</td>\n",
              "      <td>139</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>296</th>\n",
              "      <td>45.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2060</td>\n",
              "      <td>1</td>\n",
              "      <td>60</td>\n",
              "      <td>0</td>\n",
              "      <td>742000.00</td>\n",
              "      <td>0.8</td>\n",
              "      <td>138</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>297</th>\n",
              "      <td>45.0</td>\n",
              "      <td>0</td>\n",
              "      <td>2413</td>\n",
              "      <td>0</td>\n",
              "      <td>38</td>\n",
              "      <td>0</td>\n",
              "      <td>140000.00</td>\n",
              "      <td>1.4</td>\n",
              "      <td>140</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>298</th>\n",
              "      <td>50.0</td>\n",
              "      <td>0</td>\n",
              "      <td>196</td>\n",
              "      <td>0</td>\n",
              "      <td>45</td>\n",
              "      <td>0</td>\n",
              "      <td>395000.00</td>\n",
              "      <td>1.6</td>\n",
              "      <td>136</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>299 rows × 12 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-93f1aa89-1770-4909-bd1e-14c6f3d45e9e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-93f1aa89-1770-4909-bd1e-14c6f3d45e9e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-93f1aa89-1770-4909-bd1e-14c6f3d45e9e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-9027ccb7-cd14-4999-b8f8-dd6f55f30602\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9027ccb7-cd14-4999-b8f8-dd6f55f30602')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-9027ccb7-cd14-4999-b8f8-dd6f55f30602 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_4d21e9a1-90cc-49bf-9211-e6c8f6024c03\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_4d21e9a1-90cc-49bf-9211-e6c8f6024c03 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 299,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11.894809074044478,\n        \"min\": 40.0,\n        \"max\": 95.0,\n        \"num_unique_values\": 47,\n        \"samples\": [\n          79.0,\n          40.0,\n          67.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"anaemia\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"creatinine_phosphokinase\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 970,\n        \"min\": 23,\n        \"max\": 7861,\n        \"num_unique_values\": 208,\n        \"samples\": [\n          86,\n          379\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"diabetes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ejection_fraction\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11,\n        \"min\": 14,\n        \"max\": 80,\n        \"num_unique_values\": 17,\n        \"samples\": [\n          20,\n          38\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"high_blood_pressure\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"platelets\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 97804.23686859828,\n        \"min\": 25100.0,\n        \"max\": 850000.0,\n        \"num_unique_values\": 176,\n        \"samples\": [\n          297000.0,\n          255000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"serum_creatinine\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.034510064089853,\n        \"min\": 0.5,\n        \"max\": 9.4,\n        \"num_unique_values\": 40,\n        \"samples\": [\n          4.4,\n          3.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"serum_sodium\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4,\n        \"min\": 113,\n        \"max\": 148,\n        \"num_unique_values\": 27,\n        \"samples\": [\n          133,\n          134\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoking\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DEATH_EVENT\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# sklearnを使って、学習データとテストデータの分割や前処理を行います\n",
        "\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "# 乱数シード\n",
        "seed = 42 # 変更しない\n",
        "\n",
        "# データフレームをX,yに分けて、numpyアレイに変換\n",
        "df_X = df.iloc[:, 0:-1] # 最初から最後の列の1つ前まで\n",
        "df_y = df.iloc[:, -1] # 最後の列\n",
        "X_np = df_X.to_numpy()\n",
        "y_np = df_y.to_numpy()\n",
        "\n",
        "# X,yをそれぞれ学習データとテストデータに分ける\n",
        "X_train_np,  X_test_np, y_train_np, y_test_np = train_test_split(X_np, y_np, train_size=0.8, shuffle=True, random_state=seed)\n",
        "print('X_train shape {}'.format(X_train_np.shape))\n",
        "print('X_test shape {}'.format(X_test_np.shape))\n",
        "print('y_train shape {}'.format(y_train_np.shape))\n",
        "print('y_test shape {}'.format(y_test_np.shape))\n",
        "\n",
        "# X_trainの前処理\n",
        "# 標準化：各特徴量を平均0、標準偏差1となるように変換\n",
        "scaler = StandardScaler()\n",
        "X_train_np = scaler.fit_transform(X_train_np)\n",
        "\n",
        "# X_testの前処理\n",
        "# 学習データと同じ基準で変換するために、X_trainに使ったインスタンスを流用\n",
        "X_test_np = scaler.transform(X_test_np)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vduqHBaUlLuM",
        "outputId": "01276108-a9e6-4a46-d3b4-fa14d708a420"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "X_train shape (239, 11)\n",
            "X_test shape (60, 11)\n",
            "y_train shape (239,)\n",
            "y_test shape (60,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# これまでと同様の流れに沿って、各種設定と学習を行います。\n",
        "\n",
        "# 必要なモジュール一式を準備\n",
        "import torch\n",
        "import torch.nn as nn\n",
        "import torch.optim as optim\n",
        "from torch.utils.data import TensorDataset, DataLoader\n",
        "\n",
        "# 乱数シードの設定\n",
        "torch.manual_seed(seed)\n",
        "\n",
        "# ネットワーク構造の定義\n",
        "# 今回は隠れ層を1つ(ユニット数5)、活性化関数をReLUと設定\n",
        "model = nn.Sequential(\n",
        "    nn.Linear(11, 5), # 入力は長さ11のベクトル\n",
        "    nn.ReLU(),\n",
        "    nn.Linear(5, 1)\n",
        ")\n",
        "\n",
        "# 損失関数の定義\n",
        "criterion = nn.BCEWithLogitsLoss()\n",
        "\n",
        "# SGDの定義\n",
        "# 今回は学習率を0.3に設定\n",
        "optimizer = optim.SGD(model.parameters(), lr=0.3)\n",
        "\n",
        "# テンソルへの変換\n",
        "X_train = torch.tensor(X_train_np, dtype=torch.float32)\n",
        "y_train = torch.tensor(y_train_np, dtype=torch.float32).reshape(-1, 1)\n",
        "X_test = torch.tensor(X_test_np, dtype=torch.float32)\n",
        "y_test = torch.tensor(y_test_np, dtype=torch.float32).reshape(-1, 1)\n",
        "\n",
        "# バッチサイズの指定\n",
        "# 今回はバッチサイズを2に設定\n",
        "train_dataset = TensorDataset(X_train, y_train)\n",
        "train_loader = DataLoader(train_dataset, batch_size=2)\n",
        "\n",
        "# 学習\n",
        "for epoch in range(1000):\n",
        "    epoch_loss = 0.0\n",
        "    for X_batch, y_batch in train_loader:\n",
        "        optimizer.zero_grad()\n",
        "        output = model(X_batch)\n",
        "        loss = criterion(output, y_batch)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "        epoch_loss += loss.item() * X_batch.size(0)\n",
        "    avg_loss = epoch_loss / len(train_loader.dataset)\n",
        "    if epoch % 100 == 0:\n",
        "        print('Epoch {}, Loss: {}'.format(epoch, avg_loss))\n",
        "\n",
        "# 学習後の損失関数の値\n",
        "print('Loss after training: {}'.format(avg_loss))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WjiIWl3Skmo4",
        "outputId": "7679c59f-a4e8-46b0-96b8-0468411faf40"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 0, Loss: 0.5810756331707144\n",
            "Epoch 100, Loss: 0.2434312757569815\n",
            "Epoch 200, Loss: 0.20712119674660778\n",
            "Epoch 300, Loss: 0.19342930954112922\n",
            "Epoch 400, Loss: 0.19113439357506576\n",
            "Epoch 500, Loss: 0.18516694486777704\n",
            "Epoch 600, Loss: 0.18161216597617785\n",
            "Epoch 700, Loss: 0.1793338166137855\n",
            "Epoch 800, Loss: 0.1771265494126265\n",
            "Epoch 900, Loss: 0.18449958628629765\n",
            "Loss after training: 0.1830901076735006\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# テストデータに対する精度評価\n",
        "from sklearn.metrics import roc_auc_score\n",
        "\n",
        "# テストデータのクラス確率を計算\n",
        "with torch.no_grad():\n",
        "    y_test_prob = torch.sigmoid(model(X_test)) # shape (N, 1)\n",
        "    y_test_prob_np = y_test_prob.squeeze(1).numpy() # shape (N, )\n",
        "\n",
        "# ROC AUCの評価\n",
        "print('y_test_prob:\\n{}'.format(y_test_prob_np))\n",
        "auc_test = roc_auc_score(y_true=y_test_np, y_score=y_test_prob_np)\n",
        "print('ROC AUC on test data: {}'.format(auc_test))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hpQLg69NkDn0",
        "outputId": "cbe10068-be02-4371-9b0c-50db04c4f8de"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "y_test_prob:\n",
            "[4.0786784e-07 1.4666555e-29 3.2123282e-07 1.0000000e+00 2.3603027e-33\n",
            " 2.2922966e-01 7.6101828e-01 8.2168921e-18 9.5551723e-01 1.0000000e+00\n",
            " 2.2922966e-01 1.7109888e-02 5.9667082e-07 2.2922966e-01 9.5526259e-24\n",
            " 1.0000000e+00 3.5581251e-30 3.0971685e-05 0.0000000e+00 1.1920402e-16\n",
            " 9.7981811e-01 1.0000000e+00 9.9999404e-01 3.6234613e-07 9.9888688e-01\n",
            " 1.4824568e-28 9.2312898e-03 2.2922966e-01 2.2922966e-01 1.0000000e+00\n",
            " 9.9999940e-01 1.0771831e-28 9.9288708e-01 2.2922966e-01 1.6568840e-25\n",
            " 1.1575468e-08 2.2922966e-01 1.0000000e+00 5.6148479e-22 4.1291192e-15\n",
            " 5.9234820e-02 1.0000000e+00 2.2922966e-01 1.0000000e+00 4.4410133e-23\n",
            " 5.9376269e-18 9.9999988e-01 2.2922966e-01 8.0458609e-18 9.7716753e-37\n",
            " 2.2922966e-01 2.0069739e-31 2.2922966e-01 0.0000000e+00 1.0000000e+00\n",
            " 2.3941786e-28 2.2922966e-01 4.0133363e-03 3.6783268e-26 9.6088535e-01]\n",
            "ROC AUC on test data: 0.6011428571428572\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "【課題】上の例を元に、ネットワーク構造の定義、SGDの定義、バッチサイズを変更したネットワークを作成して、学習後の損失関数の値を表示してください。それ以外の設定は上の例と同じにしてください。\n",
        "\n",
        "ネットワーク構造、SGD、バッチサイズは自由に設定していいですが、エラーが出る設定や、学習で損失が全く低下しない設定は不可とします。\n"
      ],
      "metadata": {
        "id": "kdKFfrqaoPM8"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 乱数シードの設定\n",
        "torch.manual_seed(seed)\n",
        "\n",
        "# ネットワーク構造の定義\n",
        "# 隠れ層を1つ(ユニット数3)、活性化関数をReLUと設定\n",
        "model = nn.Sequential(\n",
        "    nn.Linear(11, 3),\n",
        "    nn.Sigmoid(),\n",
        "    nn.Linear(3, 1)\n",
        ")\n",
        "\n",
        "# SGDの定義\n",
        "# 学習率を0.2に設定\n",
        "optimizer = optim.SGD(model.parameters(), lr=0.2)\n",
        "\n",
        "# バッチサイズの指定\n",
        "# バッチサイズを1に設定\n",
        "train_dataset = TensorDataset(X_train, y_train)\n",
        "train_loader = DataLoader(train_dataset, batch_size=1)\n",
        "\n",
        "# 学習\n",
        "for epoch in range(1000):\n",
        "    epoch_loss = 0.0\n",
        "    for X_batch, y_batch in train_loader:\n",
        "        optimizer.zero_grad()\n",
        "        output = model(X_batch)\n",
        "        loss = criterion(output, y_batch)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "        epoch_loss += loss.item() * X_batch.size(0)\n",
        "    avg_loss = epoch_loss / len(train_loader.dataset)\n",
        "    if epoch % 100 == 0:\n",
        "        print('Epoch {}, Loss: {}'.format(epoch, avg_loss))\n",
        "\n",
        "# 学習後の損失関数の値\n",
        "print('Loss after training: {}'.format(avg_loss))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Je6Tzmk4oOXL",
        "outputId": "cc6f0ccd-38de-4e78-d26f-124eb1226513"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 0, Loss: 0.5877470110998991\n",
            "Epoch 100, Loss: 0.365610514334929\n",
            "Epoch 200, Loss: 0.3504983883304327\n",
            "Epoch 300, Loss: 0.34381039721782175\n",
            "Epoch 400, Loss: 0.3395563170360596\n",
            "Epoch 500, Loss: 0.33667391947973285\n",
            "Epoch 600, Loss: 0.3345449696700225\n",
            "Epoch 700, Loss: 0.3328847010117258\n",
            "Epoch 800, Loss: 0.33153982155188666\n",
            "Epoch 900, Loss: 0.3304224729510687\n",
            "Loss after training: 0.32948739746601075\n"
          ]
        }
      ]
    }
  ]
}
